### YamlMime:ManagedReference
items:
- uid: Heleonix.Build.Tasks.FileCopy
  commentId: T:Heleonix.Build.Tasks.FileCopy
  id: FileCopy
  parent: Heleonix.Build.Tasks
  children:
  - Heleonix.Build.Tasks.FileCopy.#ctor
  - Heleonix.Build.Tasks.FileCopy.CopiedFiles
  - Heleonix.Build.Tasks.FileCopy.DestinationDirs
  - Heleonix.Build.Tasks.FileCopy.ExecuteInternal
  - Heleonix.Build.Tasks.FileCopy.Files
  - Heleonix.Build.Tasks.FileCopy.Overwrite
  langs:
  - csharp
  - vb
  name: FileCopy
  nameWithType: FileCopy
  fullName: Heleonix.Build.Tasks.FileCopy
  type: Class
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nCopies files from sources into destinations.\n"
  syntax:
    content: 'public class FileCopy : BaseTask'
    content.vb: >-
      Public Class FileCopy
          Inherits BaseTask
  inheritance:
  - System.Object
  - Heleonix.Build.Tasks.BaseTask
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Heleonix.Build.Tasks.FileCopy.ExecuteInternal
  commentId: M:Heleonix.Build.Tasks.FileCopy.ExecuteInternal
  id: ExecuteInternal
  parent: Heleonix.Build.Tasks.FileCopy
  langs:
  - csharp
  - vb
  name: ExecuteInternal()
  nameWithType: FileCopy.ExecuteInternal()
  fullName: Heleonix.Build.Tasks.FileCopy.ExecuteInternal()
  type: Method
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nUpdates a file with specified regular expression and content.\n"
  syntax:
    content: protected override void ExecuteInternal()
    content.vb: Protected Overrides Sub ExecuteInternal
  overridden: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
  overload: Heleonix.Build.Tasks.FileCopy.ExecuteInternal*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Heleonix.Build.Tasks.FileCopy.#ctor
  commentId: M:Heleonix.Build.Tasks.FileCopy.#ctor
  id: '#ctor'
  parent: Heleonix.Build.Tasks.FileCopy
  langs:
  - csharp
  - vb
  name: FileCopy()
  nameWithType: FileCopy.FileCopy()
  fullName: Heleonix.Build.Tasks.FileCopy.FileCopy()
  type: Constructor
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  syntax:
    content: public FileCopy()
    content.vb: Public Sub New
  overload: Heleonix.Build.Tasks.FileCopy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Heleonix.Build.Tasks.FileCopy.Files
  commentId: P:Heleonix.Build.Tasks.FileCopy.Files
  id: Files
  parent: Heleonix.Build.Tasks.FileCopy
  langs:
  - csharp
  - vb
  name: Files
  nameWithType: FileCopy.Files
  fullName: Heleonix.Build.Tasks.FileCopy.Files
  type: Property
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nGets or sets files to copy.\n"
  remarks: "\nMetadata: &apos;WithSubDirsFrom&apos; - if defined, copies a file into sub folders\nstarting from the end of the defined root path. It is used to keep folders hierarchy.\n"
  example:
  - "\nFile path: C:\\Files\\SubDir1\\SubDir2\\SubDir3\\file.txt\nWithSubDirsFrom: C:\\Files\\SubDir1\nDestination: D:\\Destination\nResult: file is copied into D:\\Destination\\SubDir2\\SubDir3\\file.txt.\n"
  syntax:
    content: public ITaskItem[] Files { get; set; }
    parameters: []
    return:
      type: Microsoft.Build.Framework.ITaskItem[]
    content.vb: Public Property Files As ITaskItem()
  overload: Heleonix.Build.Tasks.FileCopy.Files*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Heleonix.Build.Tasks.FileCopy.DestinationDirs
  commentId: P:Heleonix.Build.Tasks.FileCopy.DestinationDirs
  id: DestinationDirs
  parent: Heleonix.Build.Tasks.FileCopy
  langs:
  - csharp
  - vb
  name: DestinationDirs
  nameWithType: FileCopy.DestinationDirs
  fullName: Heleonix.Build.Tasks.FileCopy.DestinationDirs
  type: Property
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nGets or sets destinations to copy files to.\n"
  remarks: "\nIf number of destinations equals to number of files, then files are copied into those directories.\nIf destination is a single directory, then files are copied into that directory.\n"
  syntax:
    content: public ITaskItem[] DestinationDirs { get; set; }
    parameters: []
    return:
      type: Microsoft.Build.Framework.ITaskItem[]
    content.vb: Public Property DestinationDirs As ITaskItem()
  overload: Heleonix.Build.Tasks.FileCopy.DestinationDirs*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Heleonix.Build.Tasks.FileCopy.Overwrite
  commentId: P:Heleonix.Build.Tasks.FileCopy.Overwrite
  id: Overwrite
  parent: Heleonix.Build.Tasks.FileCopy
  langs:
  - csharp
  - vb
  name: Overwrite
  nameWithType: FileCopy.Overwrite
  fullName: Heleonix.Build.Tasks.FileCopy.Overwrite
  type: Property
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nGets or sets a value indicating whether determines whether to overwrite destination file or ignore.\n"
  syntax:
    content: public bool Overwrite { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Overwrite As Boolean
  overload: Heleonix.Build.Tasks.FileCopy.Overwrite*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Heleonix.Build.Tasks.FileCopy.CopiedFiles
  commentId: P:Heleonix.Build.Tasks.FileCopy.CopiedFiles
  id: CopiedFiles
  parent: Heleonix.Build.Tasks.FileCopy
  langs:
  - csharp
  - vb
  name: CopiedFiles
  nameWithType: FileCopy.CopiedFiles
  fullName: Heleonix.Build.Tasks.FileCopy.CopiedFiles
  type: Property
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nGets or sets a list of successfully copied files [Output].\n"
  syntax:
    content: public ITaskItem[] CopiedFiles { get; set; }
    parameters: []
    return:
      type: Microsoft.Build.Framework.ITaskItem[]
    content.vb: Public Property CopiedFiles As ITaskItem()
  overload: Heleonix.Build.Tasks.FileCopy.CopiedFiles*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Heleonix.Build.Tasks
  commentId: N:Heleonix.Build.Tasks
  isExternal: true
  name: Heleonix.Build.Tasks
  nameWithType: Heleonix.Build.Tasks
  fullName: Heleonix.Build.Tasks
- uid: Heleonix.Build.Tasks.BaseTask
  commentId: T:Heleonix.Build.Tasks.BaseTask
  parent: Heleonix.Build.Tasks
  isExternal: true
  name: BaseTask
  nameWithType: BaseTask
  fullName: Heleonix.Build.Tasks.BaseTask
- uid: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
  commentId: M:Heleonix.Build.Tasks.BaseTask.ExecuteInternal
  parent: Heleonix.Build.Tasks.BaseTask
  isExternal: true
  name: ExecuteInternal()
  nameWithType: BaseTask.ExecuteInternal()
  fullName: Heleonix.Build.Tasks.BaseTask.ExecuteInternal()
  spec.csharp:
  - uid: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
    name: ExecuteInternal
    nameWithType: BaseTask.ExecuteInternal
    fullName: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
    name: ExecuteInternal
    nameWithType: BaseTask.ExecuteInternal
    fullName: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Heleonix.Build.Tasks.FileCopy.ExecuteInternal*
  commentId: Overload:Heleonix.Build.Tasks.FileCopy.ExecuteInternal
  isExternal: true
  name: ExecuteInternal
  nameWithType: FileCopy.ExecuteInternal
  fullName: Heleonix.Build.Tasks.FileCopy.ExecuteInternal
- uid: Heleonix.Build.Tasks.FileCopy.#ctor*
  commentId: Overload:Heleonix.Build.Tasks.FileCopy.#ctor
  isExternal: true
  name: FileCopy
  nameWithType: FileCopy.FileCopy
  fullName: Heleonix.Build.Tasks.FileCopy.FileCopy
- uid: Heleonix.Build.Tasks.FileCopy.Files*
  commentId: Overload:Heleonix.Build.Tasks.FileCopy.Files
  isExternal: true
  name: Files
  nameWithType: FileCopy.Files
  fullName: Heleonix.Build.Tasks.FileCopy.Files
- uid: Microsoft.Build.Framework.ITaskItem[]
  isExternal: true
  name: ITaskItem[]
  nameWithType: ITaskItem[]
  fullName: Microsoft.Build.Framework.ITaskItem[]
  nameWithType.vb: ITaskItem()
  fullName.vb: Microsoft.Build.Framework.ITaskItem()
  name.vb: ITaskItem()
  spec.csharp:
  - uid: Microsoft.Build.Framework.ITaskItem
    name: ITaskItem
    nameWithType: ITaskItem
    fullName: Microsoft.Build.Framework.ITaskItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Build.Framework.ITaskItem
    name: ITaskItem
    nameWithType: ITaskItem
    fullName: Microsoft.Build.Framework.ITaskItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Heleonix.Build.Tasks.FileCopy.DestinationDirs*
  commentId: Overload:Heleonix.Build.Tasks.FileCopy.DestinationDirs
  isExternal: true
  name: DestinationDirs
  nameWithType: FileCopy.DestinationDirs
  fullName: Heleonix.Build.Tasks.FileCopy.DestinationDirs
- uid: Heleonix.Build.Tasks.FileCopy.Overwrite*
  commentId: Overload:Heleonix.Build.Tasks.FileCopy.Overwrite
  isExternal: true
  name: Overwrite
  nameWithType: FileCopy.Overwrite
  fullName: Heleonix.Build.Tasks.FileCopy.Overwrite
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Heleonix.Build.Tasks.FileCopy.CopiedFiles*
  commentId: Overload:Heleonix.Build.Tasks.FileCopy.CopiedFiles
  isExternal: true
  name: CopiedFiles
  nameWithType: FileCopy.CopiedFiles
  fullName: Heleonix.Build.Tasks.FileCopy.CopiedFiles
