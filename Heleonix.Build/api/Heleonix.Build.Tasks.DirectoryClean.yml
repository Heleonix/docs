### YamlMime:ManagedReference
items:
- uid: Heleonix.Build.Tasks.DirectoryClean
  commentId: T:Heleonix.Build.Tasks.DirectoryClean
  id: DirectoryClean
  parent: Heleonix.Build.Tasks
  children:
  - Heleonix.Build.Tasks.DirectoryClean.#ctor
  - Heleonix.Build.Tasks.DirectoryClean.CleanedDirs
  - Heleonix.Build.Tasks.DirectoryClean.Dirs
  - Heleonix.Build.Tasks.DirectoryClean.ExecuteInternal
  langs:
  - csharp
  - vb
  name: DirectoryClean
  nameWithType: DirectoryClean
  fullName: Heleonix.Build.Tasks.DirectoryClean
  type: Class
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nDeletes contents of a directory, but not the directory itself.\n"
  syntax:
    content: 'public class DirectoryClean : BaseTask'
    content.vb: >-
      Public Class DirectoryClean
          Inherits BaseTask
  inheritance:
  - System.Object
  - Heleonix.Build.Tasks.BaseTask
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Heleonix.Build.Tasks.DirectoryClean.ExecuteInternal
  commentId: M:Heleonix.Build.Tasks.DirectoryClean.ExecuteInternal
  id: ExecuteInternal
  parent: Heleonix.Build.Tasks.DirectoryClean
  langs:
  - csharp
  - vb
  name: ExecuteInternal()
  nameWithType: DirectoryClean.ExecuteInternal()
  fullName: Heleonix.Build.Tasks.DirectoryClean.ExecuteInternal()
  type: Method
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nDeletes contents of a directory, but not the directory itself.\n"
  syntax:
    content: protected override void ExecuteInternal()
    content.vb: Protected Overrides Sub ExecuteInternal
  overridden: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
  overload: Heleonix.Build.Tasks.DirectoryClean.ExecuteInternal*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Heleonix.Build.Tasks.DirectoryClean.#ctor
  commentId: M:Heleonix.Build.Tasks.DirectoryClean.#ctor
  id: '#ctor'
  parent: Heleonix.Build.Tasks.DirectoryClean
  langs:
  - csharp
  - vb
  name: DirectoryClean()
  nameWithType: DirectoryClean.DirectoryClean()
  fullName: Heleonix.Build.Tasks.DirectoryClean.DirectoryClean()
  type: Constructor
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  syntax:
    content: public DirectoryClean()
    content.vb: Public Sub New
  overload: Heleonix.Build.Tasks.DirectoryClean.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Heleonix.Build.Tasks.DirectoryClean.Dirs
  commentId: P:Heleonix.Build.Tasks.DirectoryClean.Dirs
  id: Dirs
  parent: Heleonix.Build.Tasks.DirectoryClean
  langs:
  - csharp
  - vb
  name: Dirs
  nameWithType: DirectoryClean.Dirs
  fullName: Heleonix.Build.Tasks.DirectoryClean.Dirs
  type: Property
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nGets or sets directories to clean.\n"
  syntax:
    content: public ITaskItem[] Dirs { get; set; }
    parameters: []
    return:
      type: Microsoft.Build.Framework.ITaskItem[]
    content.vb: Public Property Dirs As ITaskItem()
  overload: Heleonix.Build.Tasks.DirectoryClean.Dirs*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Heleonix.Build.Tasks.DirectoryClean.CleanedDirs
  commentId: P:Heleonix.Build.Tasks.DirectoryClean.CleanedDirs
  id: CleanedDirs
  parent: Heleonix.Build.Tasks.DirectoryClean
  langs:
  - csharp
  - vb
  name: CleanedDirs
  nameWithType: DirectoryClean.CleanedDirs
  fullName: Heleonix.Build.Tasks.DirectoryClean.CleanedDirs
  type: Property
  source:
    path: Heleonix.Build
    isExternal: true
  assemblies:
  - Heleonix.Build
  namespace: Heleonix.Build.Tasks
  summary: "\nGets or sets the cleaned directories paths [Output].\n"
  syntax:
    content: public ITaskItem[] CleanedDirs { get; set; }
    parameters: []
    return:
      type: Microsoft.Build.Framework.ITaskItem[]
    content.vb: Public Property CleanedDirs As ITaskItem()
  overload: Heleonix.Build.Tasks.DirectoryClean.CleanedDirs*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Heleonix.Build.Tasks
  commentId: N:Heleonix.Build.Tasks
  isExternal: true
  name: Heleonix.Build.Tasks
  nameWithType: Heleonix.Build.Tasks
  fullName: Heleonix.Build.Tasks
- uid: Heleonix.Build.Tasks.BaseTask
  commentId: T:Heleonix.Build.Tasks.BaseTask
  parent: Heleonix.Build.Tasks
  isExternal: true
  name: BaseTask
  nameWithType: BaseTask
  fullName: Heleonix.Build.Tasks.BaseTask
- uid: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
  commentId: M:Heleonix.Build.Tasks.BaseTask.ExecuteInternal
  parent: Heleonix.Build.Tasks.BaseTask
  isExternal: true
  name: ExecuteInternal()
  nameWithType: BaseTask.ExecuteInternal()
  fullName: Heleonix.Build.Tasks.BaseTask.ExecuteInternal()
  spec.csharp:
  - uid: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
    name: ExecuteInternal
    nameWithType: BaseTask.ExecuteInternal
    fullName: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
    name: ExecuteInternal
    nameWithType: BaseTask.ExecuteInternal
    fullName: Heleonix.Build.Tasks.BaseTask.ExecuteInternal
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Heleonix.Build.Tasks.DirectoryClean.ExecuteInternal*
  commentId: Overload:Heleonix.Build.Tasks.DirectoryClean.ExecuteInternal
  isExternal: true
  name: ExecuteInternal
  nameWithType: DirectoryClean.ExecuteInternal
  fullName: Heleonix.Build.Tasks.DirectoryClean.ExecuteInternal
- uid: Heleonix.Build.Tasks.DirectoryClean.#ctor*
  commentId: Overload:Heleonix.Build.Tasks.DirectoryClean.#ctor
  isExternal: true
  name: DirectoryClean
  nameWithType: DirectoryClean.DirectoryClean
  fullName: Heleonix.Build.Tasks.DirectoryClean.DirectoryClean
- uid: Heleonix.Build.Tasks.DirectoryClean.Dirs*
  commentId: Overload:Heleonix.Build.Tasks.DirectoryClean.Dirs
  isExternal: true
  name: Dirs
  nameWithType: DirectoryClean.Dirs
  fullName: Heleonix.Build.Tasks.DirectoryClean.Dirs
- uid: Microsoft.Build.Framework.ITaskItem[]
  isExternal: true
  name: ITaskItem[]
  nameWithType: ITaskItem[]
  fullName: Microsoft.Build.Framework.ITaskItem[]
  nameWithType.vb: ITaskItem()
  fullName.vb: Microsoft.Build.Framework.ITaskItem()
  name.vb: ITaskItem()
  spec.csharp:
  - uid: Microsoft.Build.Framework.ITaskItem
    name: ITaskItem
    nameWithType: ITaskItem
    fullName: Microsoft.Build.Framework.ITaskItem
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Build.Framework.ITaskItem
    name: ITaskItem
    nameWithType: ITaskItem
    fullName: Microsoft.Build.Framework.ITaskItem
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Heleonix.Build.Tasks.DirectoryClean.CleanedDirs*
  commentId: Overload:Heleonix.Build.Tasks.DirectoryClean.CleanedDirs
  isExternal: true
  name: CleanedDirs
  nameWithType: DirectoryClean.CleanedDirs
  fullName: Heleonix.Build.Tasks.DirectoryClean.CleanedDirs
