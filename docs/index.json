{
  "Heleonix.Build/api/Targets/index.html": {
    "href": "Heleonix.Build/api/Targets/index.html",
    "title": "| Heleonix",
    "keywords": ""
  },
  "Heleonix.Build/api/Tasks/index.html": {
    "href": "Heleonix.Build/api/Tasks/index.html",
    "title": "| Heleonix",
    "keywords": ""
  },
  "Heleonix.Build/extensibility.html": {
    "href": "Heleonix.Build/extensibility.html",
    "title": "Extensibility | Heleonix",
    "keywords": "Extensibility Global properties Global properties are defined out of targets, so they can be overriden in your custom *.hxbproj files out of targets or from the command line. Naming convention <Ns><_Sys | _WS | _Run>_<PropertyName>[Dir(s) | File(s) | Url(s) | <Ext>] Ns - namespace abbreviation of your project/company etc. Sys - system property, like path to the dotnet.exe. WS - workspace-level or workspace-related property, i.e. property related to the repository being built. Run - property related to a particular pipeline run (execution, iteration, increment etc.), i.e. build counter etc. Integration A new global property should have defined default value (if applicable) in the Heleonix.Build.hxbproj and printed to the output (if applicable) in the Hx_Initialize target. Documentation and IntelliSense A new global property should be documented in the Heleonix.Build.xsd. Targets It is possible to create custom targets in addition to those provided by the build framework. They can be created as contribution to the build framework or can be used in your own pipelines. Naming convention Target name <Ns>_<TargetName>[_Variation] Variation in the name allows to define multiple real targets with some specific implementations under the same virtual <Ns>_<TargetName>. For example, <xref:Hx_DocFX_Git> is the real target, which checks out, builds and commits documentation using git, but the artifacts directory is Hx_DocFX. Also, there is no real target Hx_DocFX, but in the future the target Hx_DocFX_Svn might be created. There can be, however, properties or items defined with the name of the virtual target, i.e Hx_DocFX_Message. In this case they are common for all the real targets. Artifacts directory for all variations is the same Target parameters <TargetName>_<ParameterName>[Dir(s) | File(s) | Url(s) | <Ext>] If a parameter represents a single instance of something, then it should be defined as an MSBuild property. If a parameter represents multiple instances of something, then it should be defined as an MSBuild item and the name usually should end with (s), if that makes sense. Target private parameters _<TargetName>_<ParameterName>[Dir(s) | File(s) | <Ext>] Target artifacts The properties <TargetName>_ArtifactsDir define paths to artifacts directories and are defined outside of targets, as the global properties, because targets can depend on each other via artifacts. I.e. Hx_ChangeLog_ArtifactsDir is used by <xref:Hx_NetBuild>, <xref:Hx_NetNugetPush> etc. Targets can depend on each other only via artifacts directories, because if every target is executed in a standalone hxbuild run, then their properties and items are defined only within that particular hxbuild run. Artifacts directories can, however, be uploaded and re-used between standalone hxbuild runs. Integration In case of contribution, a new target needs to be placed in the Targets folder and included into the Targets list. Also, some unit test should be written to test key scenarios of usage and place in the Targets tests. Documentation and IntelliSense In case of contribution, the new target should be described in the xsd schema file and added to the existing Schemas and included into the list of target schemas. An example can be taken from any existing target, i.e. Hx_NetBuild.xsd. Custom target template <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"> <PropertyGroup> <Ns_TargetName_ArtifactsDir>$(Hx_Run_ArtifactsDir)/TargetName</Ns_TargetName_ArtifactsDir> </PropertyGroup> <Target Name=\"Ns_TargetName\"> <Message Text=\"> RUNNING Ns_TargetName ...\" Importance=\"high\"/> <Hx_NetSetupTool DotnetExe=\"$(Hx_Sys_DotnetExe)\" Name=\"NameOfFile\"> <Output TaskParameter=\"ToolPath\" PropertyName=\"_Ns_TargetName_NameOfFileExe\"/> </Hx_NetSetupTool> <!--Validation of required parameters--> <!--Target property groups, setting default vaues--> <!--Target item groups, setting default values--> <Message Text=\"> 1/3: Doing step one\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> 2/3: Doing step two\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> 3/3: Doing step three\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> DONE Ns_TargetName\" Importance=\"high\"/> <OnError ExecuteTargets=\"Hx_OnError\"/> </Target> </Project> Tasks It is possible to contribute to the build framework with a custom task. Naming convention <Ns>_<TaskName> <TaskName> is named in the format Noun Verb. For example Hx_FileCopy, Hx_FileRead, Hx_DirectoryClean etc. Such naming approach is handy when the list of tasks is alphabetically sorted in the Solution Expllorer, or when IntelliSense displays list of available tasks while typing a task name. Integration A new task should inherit the BaseTask. A new task should be placed in the Tasks folder and listed in the Tasks.tasks. A new task should be covered with a unit test with 100% of code coverage. The unit test should be placed in the Tasks tests. Documentation and IntelliSense A new task should be documented in the xsd schema file and placed in the Tasks schemas folder. The newly added task schema should be listed in the Tasks.xsd."
  },
  "Heleonix.Build/index.html": {
    "href": "Heleonix.Build/index.html",
    "title": "Heleonix.Build | Heleonix",
    "keywords": "Heleonix.Build The MSBuild-based build framework for applications on CI/CD systems. Install https://www.nuget.org/packages/Heleonix.Build The idea This framework is aiming to simplify implementation of different CI/CD stages for applications on CI/CD systems, like GoCD, Jenkins, TeamCity etc. The build framework consists of parameterized MSBuild Targets, such as <xref:Hx_NetBuild>, <xref:Hx_NetTest>, <xref:Hx_NetValidate> etc., which usually represent separate steps in CI pipelines. The build framework also provides set of reusable Tasks. Usually source code is organized by following some well-known or custom standards, that's why this build framework supports solid customization. Basically it follows the \"configurable conventions\" approach. Default values of properties and items of Targets follow well-known practices of arrangement of source code. So, if you follow well-known standards too, you do not even neeed to write custom build scripts. More details Usage Extensibility API"
  },
  "Heleonix.Build/usage.html": {
    "href": "Heleonix.Build/usage.html",
    "title": "Usage | Heleonix",
    "keywords": "Usage The framework is used as a .NET CLI tool hxbuild. It accepts the same arguments as the dotnet msbuild command, because it runs MSBuild under the hood. Command-line interface Argument Description -h, --help Displays help with possible CLI arguments --exe Custom dotnet.exe installation. By default, a globally available dotnet CLI installation is used MSBuild CLI args CLI arguments of the dotnet msbuild command: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-msbuild| Examples: hxbuild -h displays detailed information about the hxbuild tool. hxbuild -t:Hx_NetBuild runs the <xref:Hx_NetBuild> target. hxbuild --exe \"C:\\Program Files\\dotnet\\dotnet.exe\" -t:Hx_NetValidate;Hx_NetBuild -p:Hx_Run_Number=123 runs the <xref:Hx_NetValidate> and then the <xref:Hx_NetBuild> targets with the Hx_Run_Number 123 (see <xref:Heleonix.Build>). Properties and Items The build framework provides ability to specify global properties and target-specific properties and items in the following priority order: Command-line input properties, for example: hxbuild -t:Hx_NetBuild -p:Hx_Run_Number=123 -p:Hx_NetBuild_SlnFile=\"./src/MyApp.sln\" Workspace-level *.hxbproj file. Create a *.hxbproj file in the format of MSBuild project file in the working directory, where the hxbuild tool is running. Usually it is the directory, where your repository was checked out, or a working directory of the CI/CD agent etc. Use the Hx_WS_BuildProjFile CLI property to customize location of the workspace-level *.hxbproj file starting from the working directory. For example: hxbuild -t:Hx_NetBuild -p:Hx_WS_BuildProjFile=\"some/where/in/the/working/directory/Build.hxbproj\". Run-level *.hxbproj file, which is specified as the CLI property -p:Hx_Run_BuildProjFile=\"D:\\company\\wide\\file.hxbproj\" This way can be used i.e. if your DevOps engineers want to specify common (project-wide or company-wide) values for certain properties or items. For example: hxbuild -t:Hx_NetBuild -p:Hx_Run_BuildProjFile=\"D:\\company\\wide\\file.hxbproj\" Custom .hxbproj file An example of a Build.hxbproj, which could be used in the p.2 and p.3 in [Properties and Items] might look as below: ﻿﻿<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"> <PropertyGroup> <Hx_NetBuild_SlnFile>./src/MyApp.sln</Hx_NetBuild_SlnFile> </PropertyGroup> <ItemGroup> <Hx_NetBuild_DeleteFiles Include=\"./extra-file.txt\" /> </ItemGroup> <Target Name=\"My_Custom_Pre_Target\" BeforeTargets=\"Hx_NetBuild\"> <Message Text=\"Values of properties and items specified at the execution phase override values specified at the evaluation phase\" Importance=\"high\" /> <PropertyGroup> <Hx_NetBuild_Version>./src/MyApp.sln</Hx_NetBuild_SlnFile> </PropertyGroup> </Taarget> <Target Name=\"My_Custom_Post_Target\" AfterTargets=\"Hx_NetBuild\"> <Message Text=\"Do something after the Hx_NetBuild target\" Importance=\"high\" /> </Target> </Project> Artifacts Targets can produce artifacts - files, which are generated in the target-specific artifacts directories. Every target has the Hx_<TargetName>_ArtifactsDir property, which specifies its artifacts location. The default location is the $(Hx_Run_ArtifactsDir)/<TargetName>, where <TargetName> is the name of the target without namespace. See also Hx_Run_ArtifactsDir. Targets can depend on other targets, but only on their artifacts and not their properties or items, because targets can be run as standalone hxbuild runs, and in these cases properties and items are defined only within a standalone run. Artifacts, on the other hand, can be stored and re-used between different hxbuild runs. Github actions Example below shows how the build framework could be used in your custom Github actions: name: \"Pull Request Checks\" on: pull_request: jobs: Validate-Build-Test: runs-on: 'windows-latest' steps: - name: Checkout uses: actions/checkout@v3 - name: HxBuild run: dotnet tool install Heleonix.Build --version 7.0.3 -g - name: Validate run: hxbuild -t:Hx_NetValidate - name: Build run: hxbuild -t:Hx_NetBuild - name: Test run: hxbuild -t:Hx_NetTest IntelliSense The build framework provides XSD schemas to use intellisense while crafting your custom *.hxbproj files. Example: The Heleonix.Build.xsd file needs to be specified as the additional XML validation schema for MSBuild projects in your IDE or editor. For Visual Studio, it should be done as below: Open the Microsoft.Build.xsd file in the Visual Studio installation folder: <Visual Studio Installation Directory>\\Xml\\Schemas\\1033\\Microsoft.Build.xsd. On Windows, it is usually C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Xml\\Schemas\\1033\\Microsoft.Build.xsd. Add additional schema location pointing to installation path of the Heleonix.Build.xsd. If the build framework is installed as a global .NET tool, the path might be: C:\\Users\\<USER-NAME>\\.dotnet\\tools\\.store\\heleonix.build\\7.0.2\\heleonix.build\\7.0.2\\tools\\net6.0\\any\\Schemas\\Heleonix.Build.xsd. Reload Visual Studio IDE. All your *.hxbproj files, as well as other MSBuild projects files will have the Schemas list automatically defined, as shown below: Notes Use slash / in paths in MSBuild properties and items, not backslash \\. MSBuild replaces them on *nix OSs anyway. Use slash / in path-related regular expressions in Tasks."
  },
  "Heleonix.Execution/index.html": {
    "href": "Heleonix.Execution/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Extensions/index.html": {
    "href": "Heleonix.Extensions/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Guard/index.html": {
    "href": "Heleonix.Guard/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Reflection/index.html": {
    "href": "Heleonix.Reflection/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.AaaSpec.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.AaaSpec.html",
    "title": "Class AaaSpec | Heleonix",
    "keywords": "Class AaaSpec Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Represents the specification for the AAA tests pattern. public static class AaaSpec : Object Inheritance System.Object AaaSpec Methods Act(Action) Builds the 'Act' step of the test. public static void Act(Action action) Parameters action Action The action. And(String, Action) Builds the 'And' step of the test. public static void And(string description, Action action) Parameters description String The description. action Action The action. Arrange(Action) Builds the 'Arrange' step of the test. public static void Arrange(Action action) Parameters action Action The action. Should(String, Action) Builds the 'Should' step of the test. public static void Should(string description, Action action) Parameters description String The description. action Action The action. Teardown(Action) Builds the 'Teardown' step of the test. public static void Teardown(Action action) Parameters action Action The action. When(String, Action) Builds the 'When' step of the test. public static void When(string description, Action action) Parameters description String The description. action Action The action."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.ComponentTestAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.ComponentTestAttribute.html",
    "title": "Class ComponentTestAttribute | Heleonix",
    "keywords": "Class ComponentTestAttribute Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Marks a test fixture as a component tests. public sealed class ComponentTestAttribute : FixtureAttribute Inheritance System.Object BaseAttribute FixtureAttribute ComponentTestAttribute Implements IFixtureBuilder2 IFixtureBuilder Constructors ComponentTestAttribute() public ComponentTestAttribute() Properties Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value String The name of the test. Type Gets or sets the type of the component to be tested. public Type Type { get; set; } Property Value Type The type of the component to be tested. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.MemberTestAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.MemberTestAttribute.html",
    "title": "Class MemberTestAttribute | Heleonix",
    "keywords": "Class MemberTestAttribute Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Represents the attribute for testing of compononts' members, like methods, constructors, properties. public sealed class MemberTestAttribute : TestAttribute Inheritance System.Object BaseAttribute TestAttribute MemberTestAttribute Implements ISimpleTestBuilder IApplyToContext Constructors MemberTestAttribute() public MemberTestAttribute() Properties Name Gets or sets the name. public string Name { get; set; } Property Value String The name. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. TestName Gets the test name. protected override string TestName { get; } Property Value String The test name. Methods ApplyToContext(TestExecutionContext) public void ApplyToContext(TestExecutionContext context) Parameters context TestExecutionContext BuildFrom(IMethodInfo, Test) Builds a test method. public override TestMethod BuildFrom(IMethodInfo method, Test suite) Parameters method IMethodInfo The method. suite Test The suite. Returns TestMethod The test method. See Also TestAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.html",
    "title": "Namespace Heleonix.Testing.NUnit.Aaa | Heleonix",
    "keywords": "Namespace Heleonix.Testing.NUnit.Aaa Classes AaaSpec Represents the specification for the AAA tests pattern. ComponentTestAttribute Marks a test fixture as a component tests. MemberTestAttribute Represents the attribute for testing of compononts' members, like methods, constructors, properties."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.BddSpec.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.BddSpec.html",
    "title": "Class BddSpec | Heleonix",
    "keywords": "Class BddSpec Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Represents the specification for the BDD tests pattern. public static class BddSpec : Object Inheritance System.Object BddSpec Methods AfterEach(Action) Builds the 'AfterEach' step of the test. public static void AfterEach(Action action) Parameters action Action The action. And(String, Action) Builds the 'And' step of the test. public static void And(string description, Action action) Parameters description String The description. action Action The action. BeforeEach(Action) Builds the 'BeforeEach' step of the test. public static void BeforeEach(Action action) Parameters action Action The action. Given(String, Action) Builds the 'Given' step of the test. public static void Given(string description, Action action) Parameters description String The description. action Action The action. Then(String, Action) Builds the 'Then' step of the test. public static void Then(string description, Action action) Parameters description String The description. action Action The action. When(String, Action) Builds the 'When' step of the test. public static void When(string description, Action action) Parameters description String The description. action Action The action."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.FeatureAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.FeatureAttribute.html",
    "title": "Class FeatureAttribute | Heleonix",
    "keywords": "Class FeatureAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks a test fixture as a feature tests. public sealed class FeatureAttribute : FixtureAttribute Inheritance System.Object BaseAttribute FixtureAttribute FeatureAttribute Implements IFixtureBuilder2 IFixtureBuilder Constructors FeatureAttribute() public FeatureAttribute() Properties Name Gets or sets the name. public string Name { get; set; } Property Value String The name. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value String The name of the test. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.ScenarioAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.ScenarioAttribute.html",
    "title": "Class ScenarioAttribute | Heleonix",
    "keywords": "Class ScenarioAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks a test a a scenario test. public sealed class ScenarioAttribute : TestAttribute Inheritance System.Object BaseAttribute TestAttribute ScenarioAttribute Implements ISimpleTestBuilder IApplyToContext Constructors ScenarioAttribute() public ScenarioAttribute() Properties Name Gets or sets the name of the scenario. public string Name { get; set; } Property Value String The name of the scenario. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value String The name of the test. Methods ApplyToContext(TestExecutionContext) public void ApplyToContext(TestExecutionContext context) Parameters context TestExecutionContext BuildFrom(IMethodInfo, Test) Build a TestMethod from the provided MethodInfo. public override TestMethod BuildFrom(IMethodInfo method, Test suite) Parameters method IMethodInfo The method to be used as a test. suite Test The TestSuite to which the method will be added. Returns TestMethod A TestMethod object. See Also TestAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.StoryAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.StoryAttribute.html",
    "title": "Class StoryAttribute | Heleonix",
    "keywords": "Class StoryAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks test fixture as a story tests. public sealed class StoryAttribute : FixtureAttribute Inheritance System.Object BaseAttribute FixtureAttribute StoryAttribute Implements IFixtureBuilder2 IFixtureBuilder Constructors StoryAttribute() public StoryAttribute() Properties AsA Gets or sets an 'As a...' description. public string AsA { get; set; } Property Value String The 'As a...' description. Id Gets or sets an id of the story. public string Id { get; set; } Property Value String The id of the story. IWant Gets or sets an 'I want...' description. public string IWant { get; set; } Property Value String The 'I want..' description. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. SoThat Gets or sets an 'So that...' description. public string SoThat { get; set; } Property Value String The 'So that...' description. Summary Gets or sets a summary of a story. public string Summary { get; set; } Property Value String A summary of a story. TestName Gets the name of the test. protected override string TestName { get; } Property Value String The name of the test. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.html",
    "title": "Namespace Heleonix.Testing.NUnit.Bdd | Heleonix",
    "keywords": "Namespace Heleonix.Testing.NUnit.Bdd Classes BddSpec Represents the specification for the BDD tests pattern. FeatureAttribute Marks a test fixture as a feature tests. ScenarioAttribute Marks a test a a scenario test. StoryAttribute Marks test fixture as a story tests."
  },
  "Heleonix.Testing/index.html": {
    "href": "Heleonix.Testing/index.html",
    "title": "Heleonix.Testing | Heleonix",
    "keywords": "Heleonix.Testing The library for writing tests in BDD and AAA styles Install https://www.nuget.org/packages/Heleonix.Testing.NUnit AAA: Arrange Act Assert Structure using global::NUnit.Framework; using Heleonix.Testing.NUnit.Aaa; using static Heleonix.Testing.NUnit.Aaa.AaaSpec; /// <summary> /// Tests the <see cref=\"MyComponent\"/>. /// </summary> [ComponentTest(Type = typeof(MyComponent))] public static class MyComponentTests { /// <summary> /// Tests the <see cref=\"MyComponent.Member1\"/>. /// </summary> [MemberTest(Name = nameof(MyComponent.Member1))] public static void Member1() { Arrange(() => { }); Act(() => { }); Teardown(() => { }); When(\"the condition #1 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #1\", () => { }); }); When(\"the condition #2 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #2\", () => { }); }); } /// <summary> /// Tests the <see cref=\"MyComponent.Member2\"/>. /// </summary> [MemberTest(Name = nameof(MyComponent.Member2))] public static void Member2() { Arrange(() => { }); Act(() => { }); Teardown(() => { }); When(\"the action #1 is executed\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #1\", () => { Assert.Fail(); }); And(\"the condition #1 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #2\", () => { }); }); }); } } Tests Output BDD: Behavior Driven Development Structure using global::NUnit.Framework; using Heleonix.Testing.NUnit.Bdd; using static Heleonix.Testing.NUnit.Bdd.BddSpec; /// <summary> /// Tests the TheCoolStory. /// </summary> [Feature(Name = \"The Cool Feature\")] OR [Story( Id = \"111\", Summary = \"The cool story\", AsA = \"Product owner\", IWant = \"a cool story\", SoThat = \"I earn a lot of money\")] public static class TheCoolStory { /// <summary> /// Tests the Scenario. /// </summary> [Scenario(Name = \"Earn a lot of money in the story\")] public static void Scenario() { Given(\"the precondition #1\", () => { BeforeEach(() => { }); AfterEach(() => { }); When(\"the action #1 is executed\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #1 happens\", () => { }); And(\"the condition #1 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #2 happens\", () => { Assert.Fail(); }); }); }); And(\"condition #2 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); When(\"the action #2 is executed\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #3 happens\", () => { }); And(\"the condition #3 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #4 happens\", () => { }); }); }); }); }); } } Tests Output"
  },
  "Heleonix.Validation/index.html": {
    "href": "Heleonix.Validation/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Heleonix | Heleonix",
    "keywords": "Heleonix Heleonix is a common name for a set of free open source libraries to speed up and simplify routine development."
  }
}