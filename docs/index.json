{
  "Heleonix.Build/api/Heleonix.Build.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.html",
    "title": "Heleonix.Build | Heleonix",
    "keywords": "Heleonix.Build Properties Hx_Sys_DotnetExe A path to the 'dotnet.exe' to be used by the relevant targets. It is passed in from the '--exe' CLI parameter. Default is 'dotnet.exe', considering it is globally available. Hx_WS_Dir A current working folder, where 'hxbuild' is executed. Usually, it's a folder where a repository was checked out. Default value is the $MSBuildStartupDirectory. Hx_WS_BuildProjFile The MSBuild project file defining workspace-specific overrides. This file is imported after the $Hx_Run_BuildProjFile and overrides evaluation-phase definitions of properties and items. Default is '$Hx_WS_Dir/*.hxbproj'. Hx_WS_RepositoryUrl A url of the repository. Depends on the VCS. For example: https://github.com/Heleonix/Heleonix.Build.git. Default tries to get it from: $GO_MATERIAL_URL, $GIT_URL, \\(CI_REPOSITORY_URL, '\\)(GITHUB_SERVER_URL)/$(GITHUB_REPOSITORY).git'. Hx_WS_RepositoryAPIUrl A url of the repository API. Depends on the VCS. Default is https://api.github.com Hx_Run_BuildProjFile The MSBuild project file defining run-specific overrides. This file is imported before the $Hx_WS_BuildProjFile. Hx_Run_ArtifactsDir A path to the root artifacts directory, where targets produce their artifacts. Default is '$Hx_WS_Dir/Hx_Artifacts'. Hx_Run_Configuration A configuration, i.e. 'Release', 'Debug' etc. Default is 'Release'. Hx_Run_Number A numeric value of the incremental build from your CI/CD system. Default tries to take it from $GO_PIPELINE_COUNTER, $BUILD_NUMBER, $GITHUB_RUN_NUMBER, $CI_PIPELINE_ID or '0' otherwise. Items"
  },
  "Heleonix.Build/api/Targets/Hx_ChangeLog.html": {
    "href": "Heleonix.Build/api/Targets/Hx_ChangeLog.html",
    "title": "Hx_ChangeLog | Heleonix",
    "keywords": "Hx_ChangeLog The virtual target for variations of real targets to generate change logs from different sources and in different ways to be further used in versioning of builds, generation of release notes etc. Variations of this target should generate at least the 'semver.txt' containing the new semantic version in the format 'Major.Minor.Patch' of the product to be released based on discovered changes, and generate two files: 'ReleaseNotes.md' and 'ReleaseNotes.txt' containing textual descriptions of discovered changes, which can be used by other targets, i.e. by the 'Hx_NetBuild' while building a solution with enabled NuGet package generation, or by the 'Hx_Release_GitHub' while creating a release on GitHub etc. Properties Hx_ChangeLog_ArtifactsDir A path to the ChangeLog artifacts directory. Default is '$Hx_Run_ArtifactsDir/ChangeLog'. Items Hx_ChangeLog_TemplateFiles The list of Razor *.cshtml template files to generate change logs using the Hx_FileRazorGenerate task. Default are two templates: 'ReleaseNotes.md.cshtml' and 'ReleaseNotes.txt.cshtml' from the Heleonix.Build. Hx_ChangeLog_CustomChanges The list of custom changes with custom metadata to be passed into the Razor *.cshtml templates via the 'Data' input property of the Hx_FileRazorGenerate task to generate change logs."
  },
  "Heleonix.Build/api/Targets/Hx_ChangeLog_GitHubCommit.html": {
    "href": "Heleonix.Build/api/Targets/Hx_ChangeLog_GitHubCommit.html",
    "title": "Hx_ChangeLog_GitHubCommit | Heleonix",
    "keywords": "Hx_ChangeLog_GitHubCommit Calculates a new release version and generates change log files from GitHub commit messages, which are parsed with regular expressions. By default, it calculates a new release semantic version and change log messages using regular expressions for parsing. By default it recognizes https://www.conventionalcommits.org, but it's welcome to specify custom regular expressions to recognize custom project/company specific formats of commit messages. Properties Hx_ChangeLog_GitHubCommit_Token A GitHub access token to authorize to the GitHub Releases API. Hx_ChangeLog_GitHubCommit_VersionTagRegExp A regular expression to extract a version from a tag name of the latest release. Default regular expression parses versions in the format '11.22.33'. Hx_ChangeLog_GitHubCommit_MajorChangeRegExp A regular expression to identify a major change. Default is a regexp to identify a major change of Conventional Commits: https://www.conventionalcommits.org. Hx_ChangeLog_GitHubCommit_MinorChangeRegExp A regular expression to identify a minor change. Default is a regexp to identify a minor change of Conventional Commits: https://www.conventionalcommits.org. Hx_ChangeLog_GitHubCommit_PatchChangeRegExp A regular expression to identify a patch change. Default is a regexp to identify a patch change of Conventional Commits: https://www.conventionalcommits.org. Hx_ChangeLog_GitHubCommit_ChangeLogRegExp A regular expression to capture a change for the change log. Default is a regexp to identify changes of Conventional Commits: https://www.conventionalcommits.org. Hx_ChangeLog_GitHubCommit_RegExpOptions The .NET regular expression options for the regexp patterns. Default is 'None'. Items"
  },
  "Heleonix.Build/api/Targets/Hx_DocFX.html": {
    "href": "Heleonix.Build/api/Targets/Hx_DocFX.html",
    "title": "Hx_DocFX | Heleonix",
    "keywords": "Hx_DocFX The virtual target for variations of real targets to generate documentation stored as a repository. Properties Hx_DocFX_ArtifactsDir A path to the DocFX artifacts directory. Default is '$Hx_Run_ArtifactsDir/DocFX'. Hx_DocFX_RepositoryUrl A url of the documentation repository. Default is the $Hx_WS_RepositoryUrl. Hx_DocFX_Message The commit message to commit and upload the generated documentation back to the $Hx_DocFX_RepositoryUrl. Default is 'Automatic update of documentation.'. Items"
  },
  "Heleonix.Build/api/Targets/Hx_DocFX_Git.html": {
    "href": "Heleonix.Build/api/Targets/Hx_DocFX_Git.html",
    "title": "Hx_DocFX_Git | Heleonix",
    "keywords": "Hx_DocFX_Git The target to generate documentation created as a Docfx project. The target checks out a branch from a git repository containing a Docfx project, runs the 'docfx metadata' command, then runs the 'docfx build', then commits generated changes with the specified $Hx_DocFX_Message and pushes changes back to the remote repository. Properties Hx_DocFX_Git_BranchName The particular branch where the documentation is located in the repository under the $Hx_DocFX_RepositoryUrl. Default is 'gh-pages'. Hx_DocFX_Git_Token A token to push the updated documentation back into the $Hx_DocFX_RepositoryUrl. Hx_DocFX_Git_User The user name of the author of the commit who updates the documentation. Default is ''. Hx_DocFX_Git_Email The email of the author of the commit who updates the documentation. Default is ''. Items"
  },
  "Heleonix.Build/api/Targets/Hx_ExtentReport.html": {
    "href": "Heleonix.Build/api/Targets/Hx_ExtentReport.html",
    "title": "Hx_ExtentReport | Heleonix",
    "keywords": "Hx_ExtentReport The target generates test reports using https://www.extentreports.com. Under the hood this target uses the https://www.nuget.org/packages/extent package. Properties Hx_ExtentReport_ArtifactsDir A path to the Extent reports artifacts directory. Default is '$Hx_Run_ArtifactsDir/ExtentReport'. Hx_ExtentReport_TestResultsDir A path to the directory to search *.xml test results recursively. Default is '$Hx_Run_ArtifactsDir/*Test'. Hx_ExtentReport_Reporter A reporter to generate report: 'html' or 'v3html'. Default is 'v3html'. Hx_ExtentReport_Merge Specify 'true' to merge test results into one report, otherwise 'false'. Default is 'true'. Items"
  },
  "Heleonix.Build/api/Targets/Hx_NetBuild.html": {
    "href": "Heleonix.Build/api/Targets/Hx_NetBuild.html",
    "title": "Hx_NetBuild | Heleonix",
    "keywords": "Hx_NetBuild The target performs building of the specified solution file. It deletes specified extra files, deletes speified extra folders, cleans specified extra folders, runs the 'Restore' and then 'Clean' MSBuild targets, runs 'Restore' and then 'Build' MSBuild targets. Afterwards, the target copies .sln, 'bin' and 'obj' folders, *.props, *.*proj and custom artifacts files to the artifacts directory, which then can be uploaded to artifacts storage and then re-used by other targets, i.e. 'Hx_NetTest', 'Hx_NetNugetPush' etc. Properties Hx_NetBuild_ArtifactsDir A path to the NetBuild artifacts directory. Default is '$Hx_Run_ArtifactsDir/NetBuild'. Hx_NetBuild_SlnFile A path to the solution file to build. Default is '$Hx_WS_Dir/*.sln'. Hx_NetBuild_SnkFile The file with public/private keys pair to sign assemblies, if specified. Hx_NetBuild_Version The semantic version. It is passed as '/p:Version' property to the 'Build' target. Default is a version retrieved from '$Hx_ChangeLog_ArtifactsDir/semver.txt'. Hx_NetBuild_AssemblyVersion The .NET Assembly version, like '1.0.0.0'. It is passed as '/p:AssemblyVersion' property to the Build target. Default version is composed as '$Hx_NetBuild_Version.$Hx_Run_Number'. Hx_NetBuild_ReleaseNotesFile A text file with package release notes. It is passed as /p:PackageReleaseNotes property into the Build target. Default is '$Hx_ChangeLog_ArtifactsDir/ReleaseNotes.txt'. Items Hx_NetBuild_DeleteFiles Custom extra files to delete during cleaning. Hx_NetBuild_DeleteDirs Custom extra directories to delete during cleaning. Hx_NetBuild_CleanDirs Custom extra directories to clean, but not delete during cleaning. Hx_NetBuild_CustomArtifactsFiles Custom extra files to be copied to the artifacts directory."
  },
  "Heleonix.Build/api/Targets/Hx_NetNugetPush.html": {
    "href": "Heleonix.Build/api/Targets/Hx_NetNugetPush.html",
    "title": "Hx_NetNugetPush | Heleonix",
    "keywords": "Hx_NetNugetPush Publishes specified package files to the specified NuGet registry using the 'dotnet nuget push' command. If no package files are specified, the target tries to find them in the $Hx_NetBuild_ArtifactsDir and if package files are not found, the target executes the MSBuild 'Pack' target against the solution file found in the $Hx_NetBuild_ArtifactsDir to generate package files. Properties Hx_NetNugetPush_ArtifactsDir A path to the NugetDeploy artifacts directory. Default is '$Hx_Run_ArtifactsDir/NetNugetPush'. Hx_NetNugetPush_APIKey The NuGet API key to push packages. Hx_NetNugetPush_SourceURL The source path to publish to (nuget.org etc.). Hx_NetNugetPush_Version The semantic version. It is passed as '/p:Version' property to the 'Pack' target. The pack target is called if the '@Hx_NetNugetPush_PackageFiles' is not specified. Default is a version retrieved from the '$Hx_ChangeLog_ArtifactsDir/semver.txt'. Hx_NetNugetPush_ReleaseNotesFile A text file with package release notes. It is passed as '/p:PackageReleaseNotes' property into the Pack target. Default is '$Hx_ChangeLog_ArtifactsDir/ReleaseNotes.txt'. Items Hx_NetNugetPush_PackageFiles The package files to publish. If not specified, the *.nupkg and .snupkg files are searched in the 'bin' folders in the '$Hx_NetBuild_ArtifactsDir'. If files are not found, the target tries to find a '$Hx_NetBuild_ArtifactsDir/.sln' file and run the 'Pack' MSBuild target."
  },
  "Heleonix.Build/api/Targets/Hx_NetTest.html": {
    "href": "Heleonix.Build/api/Targets/Hx_NetTest.html",
    "title": "Hx_NetTest | Heleonix",
    "keywords": "Hx_NetTest Runs the 'dotnet test' command against the specified test files. By default, runs 'XPlat Code Coverage' with NUnit test logger https://www.nuget.org/packages/NunitXml.TestLogger. The target internally converts the generated test coverage into XMLSummary using the 'ReportGenerator' tool, and verifies the specified thresholds of source code coverage. This target also replaces source code paths using the specified regular expressions in generated *.info, *.xml, *.json files with persistent paths, i.e. paths of source code files on the particular build agent with corresponding GitHub urls, so generated test or coverage reports become portable. Such solution is flexible to support different formats of test or coverage files and different persistent paths, like GitHub, GitLab, SVN etc. Properties Hx_NetTest_ArtifactsDir A path to the artifacts directory to store results in. Default is '$Hx_Run_ArtifactsDir/NetTest'. Hx_NetTest_Logger Specifies a logger for test results and switches for the logger, i.e.: \"trx;logfilename=TestResults.trx\". Default is \"nunit;LogFileName=NUnitTestResults.xml\". Hx_NetTest_Collect Specifies a data collector, i.e.: 'XPlat Code Coverage;Format=json,lcov,cobertura'. Default is 'XPlat Code Coverage' if $Hx_NetTest_VerifyCoverage is 'true' and $Hx_NetTest_RunSettingsFile is not specified/found. Hx_NetTest_RunSettingsFile The *.runsettings file to use for running the tests. The $Hx_NetBuild_ArtifactsDir is discovered to find a *.runsettings file if the file is not specified. Hx_NetTest_Filter Filters tests using the given expression: <= != ~ !~> [ | & ]. Hx_NetTest_AdapterDir Path to a directory to be searched for additional test adapters. Hx_NetTest_DiagFile Enables diagnostic mode for the test platform and writes diagnostic messages to the specified file and to files next to it. Hx_NetTest_Verbosity Sets the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], diag[nostic]. Default is 'minimal'. Hx_NetTest_SourcePathRegExpOptions The .NET regular expression options to apply to the $Hx_NetTest_SourcePathRegExp. Default is 'Multiline'. Hx_NetTest_VerifyCoverage Set 'true' to verify minimal coverage, otherwise 'false'. Default is 'true'. Hx_NetTest_MinLineCoverage The minimum line coverage 0% - 100% to pass the target. Default is 100. Hx_NetTest_MinBranchCoverage The minimum branch coverage 0% - 100% to pass the target. Default is 100. Hx_NetTest_MinMethodCoverage The minimum method coverage 0% - 100% to pass the target. Default is 100. Items Hx_NetTest_TestFiles Inputs to run tests: .dll or .exe files containing tests, test projects .proj or .sln. Default is a '$Hx_NetBuild_ArtifactsDir/.sln'. Hx_NetTest_InlineRunSettings Run settings to be passed as '-- ...' arguments to override those in a .runsettings file. Specify run settings as MSBuild item metadata. Use '_' instead of dots for nested parameters. Example: metadata <MSTest_CaptureTraceOutput>false</MSTest_CaptureTraceOutput> becomes a 'MSTest.CaptureTraceOutput=false' argument. Hx_NetTest_SourcePathRegExps .NET regular expressions to find source code paths in generated files with results and replace. Found paths are replaced with stable accessible paths, i.e. raw repository links etc. Specify stable accessible paths in the 'Replacement' metadata."
  },
  "Heleonix.Build/api/Targets/Hx_NetValidate.html": {
    "href": "Heleonix.Build/api/Targets/Hx_NetValidate.html",
    "title": "Hx_NetValidate | Heleonix",
    "keywords": "Hx_NetValidate This target verifies that every file satisfies all the regular expressions specified in its metadata. This is useful to verify that projects reference specific packages, or projects contain specific MSBuild properties, or any custom file contains required content. Properties Hx_NetValidate_RegExpOptions Regular expression options to use when executing validation for each @Hx_NetValidate_Files. Items Hx_NetValidate_Files The list of files with regular expressions defined as metadata (metadata keys can be named in a free form) to validate. Defaults are project files, which must have the following packages: codecracker.CSharp, Microsoft.CodeAnalysis.NetAnalyzers, SecurityCodeScan.VS2019, SonarAnalyzer.CSharp, StyleCop.Analyzers."
  },
  "Heleonix.Build/api/Targets/Hx_Release_GitHub.html": {
    "href": "Heleonix.Build/api/Targets/Hx_Release_GitHub.html",
    "title": "Hx_Release_GitHub | Heleonix",
    "keywords": "Hx_Release_GitHub Creates a release on GitHub using GitHub API. For example: https://github.com/Heleonix/Heleonix.Build/releases. Properties Hx_Release_GitHub_Token A GitHub access token to authorize to the GitHub Releases API. Hx_Release_GitHub_TagName A name of the tag to create and/or from which the release should be created. Default is a version retrieved from the '$Hx_ChangeLog_ArtifactsDir/semver.txt'. Hx_Release_GitHub_ReleaseNotesFile A file with release notes for a release to be created. Default is '$Hx_ChangeLog_ArtifactsDir/ReleaseNotes.md'. Hx_Release_GitHub_TagSource Any branch or commit SHA from which the tag should be created. It is ignored if the tag already exists. Otherwise, name of the default branch 'master' is used. Items"
  },
  "Heleonix.Build/api/Targets/Hx_ReportGenerator.html": {
    "href": "Heleonix.Build/api/Targets/Hx_ReportGenerator.html",
    "title": "Hx_ReportGenerator | Heleonix",
    "keywords": "Hx_ReportGenerator This target runs https://www.nuget.org/packages/dotnet-reportgenerator-globaltool against coverage results files. Properties Hx_ReportGenerator_ArtifactsDir A path to the ReportGenerator artifacts directory. Default is '$Hx_Run_ArtifactsDir/ReportGenerator'. Hx_ReportGenerator_ReportTypes The report types to generate, separated by semicolon. See https://github.com/danielpalme/ReportGenerator?tab=readme-ov-file#supported-input-and-output-file-formats. Default is 'Badges;Html'. Hx_ReportGenerator_Verbosity The verbosity: 'Error', 'Info', 'Verbose'. 'Default' is 'Info'. Items Hx_ReportGenerator_CoverageResultFiles The coverage results files to generate reports from. Defaults are '$Hx_Run_ArtifactsDir/Coverage/.' and '$Hx_Run_ArtifactsDir/Test/**/.'."
  },
  "Heleonix.Build/api/Targets/Hx_TrxReport.html": {
    "href": "Heleonix.Build/api/Targets/Hx_TrxReport.html",
    "title": "Hx_TrxReport | Heleonix",
    "keywords": "Hx_TrxReport This target is not implemented yet, but the idea is to generate HTML test reports from the *.trx files. Properties Hx_TrxReport_ArtifactsDir A path to the TrxReport artifacts directory. Default is '$Hx_Run_ArtifactsDir/TrxReport' Items Hx_TrxReport_TestResultFiles The test results files. Defaults are '$Hx_Run_ArtifactsDir/Test/**/.trx'."
  },
  "Heleonix.Build/api/Targets/index.html": {
    "href": "Heleonix.Build/api/Targets/index.html",
    "title": "| Heleonix",
    "keywords": ""
  },
  "Heleonix.Build/api/Tasks/Hx_DirectoryClean.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_DirectoryClean.html",
    "title": "Hx_DirectoryClean | Heleonix",
    "keywords": "Hx_DirectoryClean Deletes contents of a directory, but not the directory itself. Dirs Required: true Directories to clean. CleanedDirs The cleaned directories paths [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_FileCopy.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_FileCopy.html",
    "title": "Hx_FileCopy | Heleonix",
    "keywords": "Hx_FileCopy Copies files from sources into destinations. Files Required: true Files to copy. Metadata: 'WithSubDirsFrom' - if defined, copies a file into sub folders starting from the end of the defined root path. It is used to keep folders hierarchy. Example: Files: 'C:\\Files\\SubDir1\\SubDir2\\SubDir3\\file.txt' WithSubDirsFrom: 'C:\\Files\\SubDir1' DestinationDirs: 'D:\\Destination' CopiedFiles: file is copied into the 'D:\\Destination\\SubDir2\\SubDir3\\file.txt'. DestinationDirs Required: true Destination directories to copy files to. If number of destinations equals to number of files, then files are copied into those directories. If destination is a single directory, then files are copied into that directory. Overwrite Determines whether to overwrite destination file or ignore. CopiedFiles A list of successfully copied files [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_FileRazorGenerate.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_FileRazorGenerate.html",
    "title": "Hx_FileRazorGenerate | Heleonix",
    "keywords": "Hx_FileRazorGenerate Generates a file using the passed Razor template file and passed list of data items. Example: @using System @using Microsoft.Build.Framework @inherits RazorEngineCore.RazorEngineTemplateBase<ITaskItem[]> @DateTime.UtcNow.ToShortDateString() @foreach (var item in Model) { - @item.GetMetadata(\"description\") @: } TemplateFile Required: true Path to the Razor *.cshtml template file. GeneratedFile Required: true Path of the output generated file. Data Data items to be passed to the template file as the 'Model' with any metadata."
  },
  "Heleonix.Build/api/Tasks/Hx_FileRead.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_FileRead.html",
    "title": "Hx_FileRead | Heleonix",
    "keywords": "Hx_FileRead Gets content from file by specified regular expression. File Required: true The path to the file to read content from. RegExp Required: true The .NET regular expression to find content. RegExpOptions The .NET regular expression options. Default is 'None'. Matches Found matches. The Itemspec is the path to the specified 'File', the 'Match' metadata contains the matched value [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_FileSystemSearch.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_FileSystemSearch.html",
    "title": "Hx_FileSystemSearch | Heleonix",
    "keywords": "Hx_FileSystemSearch Searches items in the file system. StartDir Required: true The directory to start from, including that directory. Direction The search direction: 'Up', 'Down'. Default is 'Down'. Types Types of items to search: 'Files', 'Directories', 'All'. Default is 'All'. PathRegExp The .NET regular expression to include found paths. Use only '/' for path separators. PathRegExpOptions The .NET regular expression options to include found paths. Default is 'IgnoreCase'. ContentRegExp The .NET regular expression to search items by content. ContentRegExpOptions The .NET regular expression options to search items by content. Default is 'IgnoreCase'. FoundFiles The found files [Output]. FoundDirs The found directories [Output]. FoundItems All the found items (files and/or directories, depending on the 'Types') [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_FileUpdate.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_FileUpdate.html",
    "title": "Hx_FileUpdate | Heleonix",
    "keywords": "Hx_FileUpdate Updates a file with specified regular expressions and replacements. File Required: true The path to the file to update. RegExps Required: true .NET regular expressions to find content to replace with values taken from the 'Replacement' metadata. RegExpOptions The .NET regular expression options. Default is 'None'."
  },
  "Heleonix.Build/api/Tasks/Hx_FileValidate.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_FileValidate.html",
    "title": "Hx_FileValidate | Heleonix",
    "keywords": "Hx_FileValidate Validates that contents of specified files corresponds to specified regex patterns. Files Required: true File paths with regex patterns in custom metadata to validate. RegExpOptions The .NET regular expression options. Default value is 'IgnoreCase'."
  },
  "Heleonix.Build/api/Tasks/Hx_GitHubCommitChangeLog.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_GitHubCommitChangeLog.html",
    "title": "Hx_GitHubCommitChangeLog | Heleonix",
    "keywords": "Hx_GitHubCommitChangeLog Collects changes from commits since the latest release on GitHub using the GitHub API, and the new version. GitHubRepositoryApiUrl Required: true The url of the GitHub API for the repository. Token Required: true A GitHub access token to authorize to the GitHub API. UserAgent Required: true The User-Agent request header. VersionTagRegExp Required: true A regular expression to extract a version from a tag name of the latest release. MajorChangeRegExp Required: true A regular expression to identify a major change. MinorChangeRegExp Required: true A regular expression to identify a minor change. PatchChangeRegExp Required: true A regular expression to identify a patch change. ChangeLogRegExp Required: true A regular expression to capture a change for the change log. RegExpOptions The .NET regular expression options for regexp patterns. Default is 'None'. Version The calculated version based on the change conventions [Output]. Changes The list of changes with metadata as captured groups names and values. The 'Version' and 'PreviousVersion' metadata specify the new calculated and previous release versions [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_GitHubRelease.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_GitHubRelease.html",
    "title": "Hx_GitHubRelease | Heleonix",
    "keywords": "Hx_GitHubRelease Creates a release on GitHub using the GitHub API. GitHubRepositoryApiUrl Required: true The url of the GitHub API for the repository. Token Required: true A GitHub access token to authorize to the GitHub API. UserAgent Required: true The User-Agent request header. TagName Required: true A name of the tag to create and/or from which the release should be created. TagSource Any branch or commit SHA from which the tag should be created. It is ignored if the tag already exists. Otherwise, name of the repository's default branch is used. Name A name of the release. If not specified, the tag name is used. Body Release notes as a text string. IsDraft A value indicating whether to create a draft (unpublished) release, or a published one. IsPrerelease A value indicating whether to identify the release as a prerelease, or as a full release."
  },
  "Heleonix.Build/api/Tasks/Hx_GitParseRepoUrl.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_GitParseRepoUrl.html",
    "title": "Hx_GitParseRepoUrl | Heleonix",
    "keywords": "Hx_GitParseRepoUrl Extracts owner and repository name from the repository url. RepositoryUrl A reporsitory url to parse, like https://github.com/Heleonix/Heleonix.Build.git or git@github.com:Heleonix/Heleonix.Build.git. OwnerName The name of the owner extracted from the url [Output]. RepositoryName The name of the repository extracted from the url [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_MetadataToCmdArgs.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_MetadataToCmdArgs.html",
    "title": "Hx_MetadataToCmdArgs | Heleonix",
    "keywords": "Hx_MetadataToCmdArgs Stringifies metadata to be used as command line arguments. Example: <_Key_One>one</_Key_One> <__Key_Two>two</__Key_Two> Becomes: -Key.One=one --Key.Two=two Item An MSBuild item with metadata to stringify. Leading '_' are replaced with '-'. MetadataSeparator The separator string to separate metadata key/value pairs. Default is ' '. KeyValueSeparator The separator string to separate key and value of every metadata. Default is '='. DottedKeys A value indicating whether metadata keys like 'Key_Name' should be changed to the 'Key.Name' or not. Result The stringified metadata [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_NetFindProjects.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_NetFindProjects.html",
    "title": "Hx_NetFindProjects | Heleonix",
    "keywords": "Hx_NetFindProjects Finds .NET projects files in a given solution file. SlnFile The path to the solution file to search projects files in. ProjectFiles Projects files found in the specified solution file [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_NetFindSln.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_NetFindSln.html",
    "title": "Hx_NetFindSln | Heleonix",
    "keywords": "Hx_NetFindSln Finds a solution file strictly in the specified directory. StartDir A directory to search in. SlnFile The path to the fould solution file [Output]."
  },
  "Heleonix.Build/api/Tasks/Hx_NetSetupTool.html": {
    "href": "Heleonix.Build/api/Tasks/Hx_NetSetupTool.html",
    "title": "Hx_NetSetupTool | Heleonix",
    "keywords": "Hx_NetSetupTool Sets up the tool (a .NET tool or a dependency package) to be used by the Heleonix.Build framework. Name The name of the .NET tool to be used or the name of the dependency package. Example of a .NET tool Name: 'hxbuild', 'docfx'. Example of a dependency package name: 'NunitXml.TestLogger'. DotnetExe The path to the 'dotnet.exe' executable to use for installation commands. Use $Hx_Sys_DotnetExe in your targets. PackageName The name of the package to install. For the tools used by the Heleonix.Build it is ignored, because the 'PackageName' is hard-coded. For your custom tools it needs to be specified. If 'IsPackage' is 'true', it is ignored, because the 'Name' is used instead. Version The version of the tool to be installed, i.e. '1.0.0', '6.0.1'. If not specified, the latest version is installed. For the tools used by the Heleonix.Build, it is ignored, because the specific versions are hard-coded. IsPackage For dependency packages set it to 'true'. For .NET tools set it to 'false'. Default is 'false'. ToolPath The path to the installed .NET tool executable or to the installed dependency package folder [Output]."
  },
  "Heleonix.Build/api/Tasks/index.html": {
    "href": "Heleonix.Build/api/Tasks/index.html",
    "title": "| Heleonix",
    "keywords": ""
  },
  "Heleonix.Build/extensibility.html": {
    "href": "Heleonix.Build/extensibility.html",
    "title": "Extensibility | Heleonix",
    "keywords": "Extensibility Global properties Global properties are defined out of targets, so they can be overriden in your custom *.hxbproj files out of targets or from the command line. Naming convention <Ns><_Sys | _WS | _Run>_<PropertyName>[Dir(s) | File(s) | Url(s) | <Ext>] Ns - namespace abbreviation of your project/company etc. Sys - system property, like path to the dotnet.exe. WS - workspace-level or workspace-related property, i.e. property related to the repository being built. Run - property related to a particular pipeline run (execution, iteration, increment etc.), i.e. build counter etc. Integration A new global property should have defined default value (if applicable) in the Heleonix.Build.hxbproj and printed to the output (if applicable) in the Hx_Initialize target. Documentation and IntelliSense A new global property should be documented in the Heleonix.Build.xsd. Targets It is possible to create custom targets in addition to those provided by the build framework. They can be created as contribution to the build framework or can be used in your own pipelines. Naming convention Target name <Ns>_<TargetName>[_Variation] Variation in the name allows to define multiple real targets with some specific implementations under the same virtual <Ns>_<TargetName>. For example, Hx_DocFX_Git is the real target, which checks out, builds and commits documentation using git, but the artifacts directory is Hx_DocFX. Also, there is no real target Hx_DocFX, but in the future the target Hx_DocFX_Svn might be created. There can be, however, properties or items defined with the name of the virtual target, i.e Hx_DocFX_Message. In this case they are common for all the real targets. Artifacts directory for all variations is the same Target parameters <TargetName>_<ParameterName>[Dir(s) | File(s) | Url(s) | <Ext>] If a parameter represents a single instance of something, then it should be defined as an MSBuild property. If a parameter represents multiple instances of something, then it should be defined as an MSBuild item and the name usually should end with (s), if that makes sense. Target private parameters _<TargetName>_<ParameterName>[Dir(s) | File(s) | <Ext>] Target artifacts The properties <TargetName>_ArtifactsDir define paths to artifacts directories and are defined outside of targets, as the global properties, because targets can depend on each other via artifacts. I.e. Hx_ChangeLog_ArtifactsDir is used by Hx_NetBuild, Hx_NetNugetPush etc. Targets can depend on each other only via artifacts directories, because if every target is executed in a standalone hxbuild run, then their properties and items are defined only within that particular hxbuild run. Artifacts directories can, however, be uploaded and re-used between standalone hxbuild runs. Integration In case of contribution, a new target needs to be placed in the Targets folder and included into the Targets list. Also, some unit test should be written to test key scenarios of usage and place in the Targets tests. Documentation and IntelliSense In case of contribution, the new target should be described in the xsd schema file and added to the existing Schemas and included into the list of target schemas. An example can be taken from any existing target, i.e. Hx_NetBuild.xsd. Custom target template <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"> <PropertyGroup> <Ns_TargetName_ArtifactsDir>$(Hx_Run_ArtifactsDir)/TargetName</Ns_TargetName_ArtifactsDir> </PropertyGroup> <Target Name=\"Ns_TargetName\"> <Message Text=\"> RUNNING Ns_TargetName ...\" Importance=\"high\"/> <Hx_NetSetupTool DotnetExe=\"$(Hx_Sys_DotnetExe)\" Name=\"NameOfFile\"> <Output TaskParameter=\"ToolPath\" PropertyName=\"_Ns_TargetName_NameOfFileExe\"/> </Hx_NetSetupTool> <!--Validation of required parameters--> <!--Target property groups, setting default vaues--> <!--Target item groups, setting default values--> <Message Text=\"> 1/3: Doing step one\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> 2/3: Doing step two\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> 3/3: Doing step three\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> DONE Ns_TargetName\" Importance=\"high\"/> <OnError ExecuteTargets=\"Hx_OnError\"/> </Target> </Project> Tasks It is possible to contribute to the build framework with a custom task. Naming convention <Ns>_<TaskName> <TaskName> is named in the format Noun Verb. For example Hx_FileCopy, Hx_FileRead, Hx_DirectoryClean etc. Such naming approach is handy when the list of tasks is alphabetically sorted in the Solution Expllorer, or when IntelliSense displays list of available tasks while typing a task name. Integration A new task should inherit the BaseTask. A new task should be placed in the Tasks folder and listed in the Tasks.tasks. A new task should be covered with a unit test with 100% of code coverage. The unit test should be placed in the Tasks tests. Documentation and IntelliSense A new task should be documented in the xsd schema file and placed in the Tasks schemas folder. The newly added task schema should be listed in the Tasks.xsd."
  },
  "Heleonix.Build/index.html": {
    "href": "Heleonix.Build/index.html",
    "title": "Heleonix.Build | Heleonix",
    "keywords": "Heleonix.Build The MSBuild-based build framework for applications on CI/CD systems. Install https://www.nuget.org/packages/Heleonix.Build The idea This framework is aiming to simplify implementation of different CI/CD stages for applications on CI/CD systems, like GoCD, Jenkins, TeamCity etc. The build framework consists of parameterized MSBuild Targets, such as Hx_NetBuild, Hx_NetTest, Hx_NetValidate etc., which usually represent separate steps in CI pipelines. The build framework also provides set of reusable Tasks. Usually source code is organized by following some well-known or custom standards, that's why this build framework supports solid customization. Basically it follows the \"configurable conventions\" approach. Default values of properties and items of Targets follow well-known practices of arrangement of source code. So, if you follow well-known standards too, you do not even neeed to write custom build scripts. More details Usage Extensibility API Contribution Guideline Create a fork from the main repository Implement whatever is needed Create a Pull Request. Make sure the assigned Checks pass successfully. You can watch the progress in the PR: .NET GitHub workflows Request review from the code owner Once approved, merge your Pull Request via Squash and merge IMPORTANT While merging, enter a Conventional Commits commit message. This commit message will be used in automatically generated Github Release Notes and NuGet Release Notes Monitor the Release: .NET / NuGet GitHub workflow to make sure your changes are delivered successfully In case of any issues, please contact heleonix.sln@gmail.com"
  },
  "Heleonix.Build/usage.html": {
    "href": "Heleonix.Build/usage.html",
    "title": "Usage | Heleonix",
    "keywords": "Usage The framework is used as a .NET CLI tool hxbuild. It accepts the same arguments as the dotnet msbuild command, because it runs MSBuild under the hood. Command-line interface Argument Description -h, --help Displays help with possible CLI arguments --exe Custom dotnet.exe installation. By default, a globally available dotnet CLI installation is used MSBuild CLI args CLI arguments of the dotnet msbuild command: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-msbuild| Examples: hxbuild -h displays detailed information about the hxbuild tool. hxbuild -t:Hx_NetBuild runs the Hx_NetBuild target. hxbuild --exe \"C:\\Program Files\\dotnet\\dotnet.exe\" -t:Hx_NetValidate;Hx_NetBuild -p:Hx_Run_Number=123 runs the Hx_NetValidate and then the Hx_NetBuild targets with the Hx_Run_Number 123 (see Heleonix.Build). Properties and Items The build framework provides ability to specify global properties and target-specific properties and items in the following priority order: Command-line input properties, for example: hxbuild -t:Hx_NetBuild -p:Hx_Run_Number=123 -p:Hx_NetBuild_SlnFile=\"./src/MyApp.sln\" Workspace-level *.hxbproj file. Create a *.hxbproj file in the format of MSBuild project file in the working directory, where the hxbuild tool is running. Usually it is the directory, where your repository was checked out, or a working directory of the CI/CD agent etc. Use the Hx_WS_BuildProjFile CLI property to customize location of the workspace-level *.hxbproj file starting from the working directory. For example: hxbuild -t:Hx_NetBuild -p:Hx_WS_BuildProjFile=\"some/where/in/the/working/directory/Build.hxbproj\". Run-level *.hxbproj file, which is specified as the CLI property -p:Hx_Run_BuildProjFile=\"D:\\company\\wide\\file.hxbproj\" This way can be used i.e. if your DevOps engineers want to specify common (project-wide or company-wide) values for certain properties or items. For example: hxbuild -t:Hx_NetBuild -p:Hx_Run_BuildProjFile=\"D:\\company\\wide\\file.hxbproj\" Custom .hxbproj file An example of a Build.hxbproj, which could be used in the p.2 and p.3 in [Properties and Items] might look as below: ﻿﻿<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"> <PropertyGroup> <Hx_NetBuild_SlnFile>./src/MyApp.sln</Hx_NetBuild_SlnFile> </PropertyGroup> <ItemGroup> <Hx_NetBuild_DeleteFiles Include=\"./extra-file.txt\" /> </ItemGroup> <Target Name=\"My_Custom_Pre_Target\" BeforeTargets=\"Hx_NetBuild\"> <Message Text=\"Values of properties and items specified at the execution phase override values specified at the evaluation phase\" Importance=\"high\" /> <PropertyGroup> <Hx_NetBuild_Version>./src/MyApp.sln</Hx_NetBuild_SlnFile> </PropertyGroup> </Taarget> <Target Name=\"My_Custom_Post_Target\" AfterTargets=\"Hx_NetBuild\"> <Message Text=\"Do something after the Hx_NetBuild target\" Importance=\"high\" /> </Target> </Project> Artifacts Targets can produce artifacts - files, which are generated in the target-specific artifacts directories. Every target has the Hx_<TargetName>_ArtifactsDir property, which specifies its artifacts location. The default location is the $(Hx_Run_ArtifactsDir)/<TargetName>, where <TargetName> is the name of the target without namespace. See also Hx_Run_ArtifactsDir. Targets can depend on other targets, but only on their artifacts and not their properties or items, because targets can be run as standalone hxbuild runs, and in these cases properties and items are defined only within a standalone run. Artifacts, on the other hand, can be stored and re-used between different hxbuild runs. Github actions Example below shows how the build framework could be used in your custom Github actions: name: \"Pull Request Checks\" on: pull_request: jobs: Validate-Build-Test: runs-on: 'windows-latest' steps: - name: Checkout uses: actions/checkout@v3 - name: HxBuild run: dotnet tool install Heleonix.Build --version 7.0.3 -g - name: Validate run: hxbuild -t:Hx_NetValidate - name: Build run: hxbuild -t:Hx_NetBuild - name: Test run: hxbuild -t:Hx_NetTest IntelliSense The build framework provides XSD schemas to use intellisense while crafting your custom *.hxbproj files. Example: The Heleonix.Build.xsd file needs to be specified as the additional XML validation schema for MSBuild projects in your IDE or editor. For Visual Studio, it should be done as below: Open the Microsoft.Build.xsd file in the Visual Studio installation folder: <Visual Studio Installation Directory>\\Xml\\Schemas\\1033\\Microsoft.Build.xsd. On Windows, it is usually C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Xml\\Schemas\\1033\\Microsoft.Build.xsd. Add additional schema location pointing to installation path of the Heleonix.Build.xsd. If the build framework is installed as a global .NET tool, the path might be: C:\\Users\\<USER-NAME>\\.dotnet\\tools\\.store\\heleonix.build\\7.0.2\\heleonix.build\\7.0.2\\tools\\net6.0\\any\\Schemas\\Heleonix.Build.xsd. Reload Visual Studio IDE. All your *.hxbproj files, as well as other MSBuild projects files will have the Schemas list automatically defined, as shown below: Notes Use slash / in paths in MSBuild properties and items, not backslash \\. MSBuild replaces them on *nix OSs anyway. Use slash / in path-related regular expressions in Tasks."
  },
  "Heleonix.Execution/Heleonix.Execution.ArgsBuilder.html": {
    "href": "Heleonix.Execution/Heleonix.Execution.ArgsBuilder.html",
    "title": "Class ArgsBuilder | Heleonix",
    "keywords": "Class ArgsBuilder Namespace Heleonix.Execution Assembly Heleonix.Execution.dll Helps to build command line arguments to be passed in to executables. Each method accepts a condition argument to determine whether to add an argument or not, and returns this instance of the ArgsBuilder for chaining. public sealed class ArgsBuilder Inheritance object ArgsBuilder Inherited Members object.GetType() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AddArgument(string, object, bool) Adds the specified key and value. public ArgsBuilder AddArgument(string key, object value, bool condition = true) Parameters key string The key. value object The value. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddArgument = true; var args = ArgsBuilder.By(\"--\", \"=\").AddArgument(\"arg1\", \"value1\", canAddArgument); // args: \"--arg1=value1\". AddArguments(string, IEnumerable<object>, bool, bool) Adds the specified list of values with the specified key, repeating key/value pair if multipleTimes is true. public ArgsBuilder AddArguments(string key, IEnumerable<object> values, bool multipleTimes = false, bool condition = true) Parameters key string The key. values IEnumerable<object> The values. multipleTimes bool Determines whether to add each argument with a separate key. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddArguments = true; var args = ArgsBuilder.By(\"--\", \"=\", valueSeparator: \",\").AddArguments(\"key\", new[] { \"111\", \"222\", false, canAddArguments); var multipleArgs = ArgsBuilder.By(\"--\", \"=\").AddArguments(\"key\", new[] { \"111\", \"222\", true, canAddArguments); // args: \"--key=111,222\" // multipleArgs: \"--key=111 --key=222\". AddKey(string, bool) Adds the specified key. public ArgsBuilder AddKey(string key, bool condition = true) Parameters key string The key. condition bool A condition to add. Returns ArgsBuilder This ArgsBuilder. Examples var canAddKey = true; var args = ArgsBuilder.By(\"--\", \"=\").AddKey(\"key1\", canAddKey); // args: \"--key1\". AddKeys(IEnumerable<string>, bool) Adds the specified list of keys. public ArgsBuilder AddKeys(IEnumerable<string> keys, bool condition = true) Parameters keys IEnumerable<string> The keys. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddKeys = true; var args = ArgsBuilder.By(\"--\", \"=\").AddKeys(new[] { \"key1\", \"key2\" }, canAddKeys); // args: \"--key1 --key2\". AddPath(string, bool) Adds the specified path. public ArgsBuilder AddPath(string path, bool condition = true) Parameters path string The path. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddPath = true; var args = ArgsBuilder.By(\"--\", \"=\").AddPath(\"C:\\My Folder\\my file.txt\", canAddPath); // args: \"\"C:\\My Folder\\my file.txt\"\". AddPath(string, string, bool) Adds the specified path with the specified key. public ArgsBuilder AddPath(string key, string path, bool condition = true) Parameters key string The key. path string The path. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddPath = true; var args = ArgsBuilder.By(\"--\", \"=\").AddPath(\"key\", \"C:\\My Folder\\my file.txt\", canAddPath); // args: \"--key=\"C:\\My Folder\\my file.txt\"\". AddPaths(IEnumerable<string>, bool) Adds the specified list of paths. public ArgsBuilder AddPaths(IEnumerable<string> paths, bool condition = true) Parameters paths IEnumerable<string> The paths. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddPaths = true; var args = ArgsBuilder.By(\"--\", \"=\").AddPaths(new [] { \"C:\\my file 1.txt\", \"C:\\my file 2.txt\", canAddPaths); // args: \"\"C:\\my file 1.txt\" \"C:\\my file 2.txt\"\". AddPaths(string, IEnumerable<string>, bool, bool) Adds the specified list of paths with the specified key, repeating key/path pair if multipleTimes is true. public ArgsBuilder AddPaths(string key, IEnumerable<string> paths, bool multipleTimes = false, bool condition = true) Parameters key string The key. paths IEnumerable<string> The paths. multipleTimes bool Determines whether to add each path with separate key. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddPaths = true; var args = ArgsBuilder.By(\"--\", \"=\", valueSeparator: \",\").AddPaths(\"key\", new[] { \"C:\\my file 1.txt\", \"C:\\my file 2.txt\", false, canAddPaths); var multipleArgs = ArgsBuilder.By(\"--\", \"=\").AddPaths(\"key\", new[] { \"C:\\my file 1.txt\", \"C:\\my file 2.txt\", true, canAddPaths); // args: \"--key=\"C:\\my file 1.txt\",\"C:\\my file 2.txt\"\" // multipleArgs: \"--key=\"C:\\my file 1.txt\" --key=\"C:\\my file 2.txt\"\". AddValue(object, bool) Adds the specified value. public ArgsBuilder AddValue(object value, bool condition = true) Parameters value object The value. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddValue = true; var args = ArgsBuilder.By(\"--\", \"=\").AddValue(\"12345\", canAddValue); // args: \"12345\". AddValues(IEnumerable<object>, bool) Adds the specified list of values. public ArgsBuilder AddValues(IEnumerable<object> values, bool condition = true) Parameters values IEnumerable<object> The values. condition bool A condition to add. Returns ArgsBuilder This instance. Examples var canAddValues = true; var args = ArgsBuilder.By(\"--\", \"=\").AddValues(new [] { \"111\", \"222\", canAddValues); // args: \"111 222\". By(string, string, string, string, string) Creates a new ArgsBuilder with the specified separators. public static ArgsBuilder By(string keyPrefix, string keyValueSeparator, string valueSeparator = \";\", string pathWrapper = \"\\\"\", string argsSeparator = \" \") Parameters keyPrefix string Prepends each key. keyValueSeparator string Separates keys and values. valueSeparator string Separates multiple values or paths under a single key. pathWrapper string Wraps paths using AddPath or AddPaths when paths have spaces etc. argsSeparator string Separates key/value pairs (arguments). Returns ArgsBuilder A newly created ArgsBuilder instance. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. Operators implicit operator string(ArgsBuilder) Performs an implicit conversion from ArgsBuilder to string. public static implicit operator string(ArgsBuilder builder) Parameters builder ArgsBuilder The builder. Returns string The result of the conversion."
  },
  "Heleonix.Execution/Heleonix.Execution.ExeHelper.html": {
    "href": "Heleonix.Execution/Heleonix.Execution.ExeHelper.html",
    "title": "Class ExeHelper | Heleonix",
    "keywords": "Class ExeHelper Namespace Heleonix.Execution Assembly Heleonix.Execution.dll Provides functionality for working with executables. public static class ExeHelper Inheritance object ExeHelper Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Execute(string, string, bool, string, int) Executes an executable by the specified exePath. public static ExeResult Execute(string exePath, string arguments, bool extractOutput, string workingDirectory = \"\", int waitForExit = 2147483647) Parameters exePath string Defines the path to executable. arguments string Represents the command line arguments. extractOutput bool Defines whether to redirect and extract standard output and errors or not. workingDirectory string The current working directory. Relative paths inside the executable will be relative to this working directory. waitForExit int A number of millisecoonds to wait for process ending. Use MaxValue to wait infinitely. Returns ExeResult An exit result. Examples var result = ExeHelper.Execute( @\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\", \"--app=http://www.google.com --window-size=300,300 --new-window\", true, string.Empty, 2000); Console.WriteLine(result.ExitCode); // An exit code: value returned by Main or by Environment.Exit(exitCode) etc. Console.WriteLine(result.Output); // Output like Console.WriteLine is available here Console.WriteLine(result.Error); // Output like Console.Error.WriteLine is available here. Exceptions InvalidOperationException See the inner exception for details. Execute(string, string, string) Executes an executable by the specified path. Does not extract output and error streams. public static int Execute(string exePath, string arguments, string workingDirectory = \"\") Parameters exePath string The execute path. arguments string The arguments. workingDirectory string The working directory. Returns int An executable's exit code. Exceptions InvalidOperationException See the inner exception for details."
  },
  "Heleonix.Execution/Heleonix.Execution.ExeResult.html": {
    "href": "Heleonix.Execution/Heleonix.Execution.ExeResult.html",
    "title": "Class ExeResult | Heleonix",
    "keywords": "Class ExeResult Namespace Heleonix.Execution Assembly Heleonix.Execution.dll Represents a result of execution of an executable. public class ExeResult Inheritance object ExeResult Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ExeResult() public ExeResult() Properties Error Gets or sets the executable's error output. public string Error { get; set; } Property Value string ExitCode Gets or sets the exit code. public int ExitCode { get; set; } Property Value int Output Gets or sets the executable's output. public string Output { get; set; } Property Value string Methods Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "Heleonix.Execution/Heleonix.Execution.html": {
    "href": "Heleonix.Execution/Heleonix.Execution.html",
    "title": "Namespace Heleonix.Execution | Heleonix",
    "keywords": "Namespace Heleonix.Execution Classes ArgsBuilder Helps to build command line arguments to be passed in to executables. Each method accepts a condition argument to determine whether to add an argument or not, and returns this instance of the ArgsBuilder for chaining. ExeHelper Provides functionality for working with executables. ExeResult Represents a result of execution of an executable."
  },
  "Heleonix.Execution/index.html": {
    "href": "Heleonix.Execution/index.html",
    "title": "Heleonix.Execution | Heleonix",
    "keywords": "Heleonix.Execution Provides a command line arguments builder, methods to run executables and extract outputs, etc. Install https://www.nuget.org/packages/Heleonix.Execution API See Heleonix.Execution Examples ExeHelper var result = ExeHelper.Execute( @\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\", \"--app=http://www.google.com --window-size=300,300 --new-window\", true, string.Empty, 2000); Console.WriteLine(result.ExitCode); // An exit code: value returned by `Main` or by `Environment.Exit(exitCode)` etc. Console.WriteLine(result.Output); // Output like `Console.WriteLine` is available here Console.WriteLine(result.Error); // Output like `Console.Error.WriteLine` is available here. ArgsBuilder var canAddArguments = true; var args = ArgsBuilder.By(\"--\", \"=\", valueSeparator: \",\").AddArguments(\"key\", new[] { \"111\", \"222\", false, canAddArguments); var multipleArgs = ArgsBuilder.By(\"--\", \"=\").AddArguments(\"key\", new[] { \"111\", \"222\", true, canAddArguments); // args: \"--key=111,222\" // multipleArgs: \"--key=111 --key=222\". Contribution Guideline Create a fork from the main repository Implement whatever is needed Create a Pull Request. Make sure the assigned Checks pass successfully. You can watch the progress in the PR: .NET GitHub workflows Request review from the code owner Once approved, merge your Pull Request via Squash and merge IMPORTANT While merging, enter a Conventional Commits commit message. This commit message will be used in automatically generated Github Release Notes and NuGet Release Notes Monitor the Release: .NET / NuGet GitHub workflow to make sure your changes are delivered successfully In case of any issues, please contact heleonix.sln@gmail.com"
  },
  "Heleonix.Extensions/index.html": {
    "href": "Heleonix.Extensions/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Guard/Heleonix.Guard.ExceptionRaiser.html": {
    "href": "Heleonix.Guard/Heleonix.Guard.ExceptionRaiser.html",
    "title": "Class ExceptionRaiser | Heleonix",
    "keywords": "Class ExceptionRaiser Namespace Heleonix.Guard Assembly Heleonix.Guard.dll Provides raising of exceptions with building of conditions to throw them. public class ExceptionRaiser Inheritance object ExceptionRaiser Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AggregateException(bool, string, params Exception[]) Raises the AggregateException(bool, string, params Exception[]). public void AggregateException(bool when, string message = null, params Exception[] innerExceptions) Parameters when bool A condition to throw the exception. message string The message. innerExceptions Exception[] The inner exceptions. AmbiguousMatchException(bool, string, Exception) Raises the AmbiguousMatchException(bool, string, Exception). public void AmbiguousMatchException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. ArgumentException(bool, string, string, Exception) Raises the ArgumentException(bool, string, string, Exception). public void ArgumentException(bool when, string message = null, string paramName = null, Exception innerException = null) Parameters when bool A condition to throw the exception.A condition to throw the exception. message string The message. paramName string Name of the parameter. innerException Exception The inner exception. ArgumentNullException(bool, string, Exception) Raises the ArgumentNullException. public void ArgumentNullException(bool when, string message, Exception innerException) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. ArgumentNullException(bool, string, string) Raises the ArgumentNullException. public void ArgumentNullException(bool when, string paramName = null, string message = null) Parameters when bool A condition to throw the exception. paramName string Name of the parameter. message string The message. ArgumentOutOfRangeException(bool, string, Exception) Raises the ArgumentOutOfRangeException. public void ArgumentOutOfRangeException(bool when, string message, Exception innerException) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. ArgumentOutOfRangeException(bool, string, object, string) Raises the ArgumentOutOfRangeException. public void ArgumentOutOfRangeException(bool when, string paramName = null, object actualValue = null, string message = null) Parameters when bool A condition to throw the exception. paramName string Name of the parameter. actualValue object The value of the argument that causes this exception. message string The message. AuthenticationException(bool, string, Exception) Raises the AuthenticationException(bool, string, Exception). public void AuthenticationException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. DirectoryNotFoundException(bool, string, Exception) Raises the DirectoryNotFoundException(bool, string, Exception). public void DirectoryNotFoundException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. DllNotFoundException(bool, string, Exception) Raises the DllNotFoundException(bool, string, Exception). public void DllNotFoundException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. DriveNotFoundException(bool, string, Exception) Raises the DriveNotFoundException(bool, string, Exception). public void DriveNotFoundException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. Exception(bool, string, Exception) Raises the Exception. public void Exception(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. FileLoadException(bool, string, string, Exception) Raises the FileLoadException(bool, string, string, Exception). public void FileLoadException(bool when, string message = null, string fileName = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. fileName string The file name. innerException Exception The inner exception. FileNotFoundException(bool, string, string, Exception) Raises the FileNotFoundException(bool, string, string, Exception). public void FileNotFoundException(bool when, string message = null, string fileName = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. fileName string The file name. innerException Exception The inner exception. FormatException(bool, string, Exception) Raises the FormatException(bool, string, Exception). public void FormatException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. IndexOutOfRangeException(bool, string, Exception) Raises the IndexOutOfRangeException(bool, string, Exception). public void IndexOutOfRangeException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. InvalidCastException(bool, string, Exception) Raises the InvalidCastException. public void InvalidCastException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. InvalidCastException(bool, string, int) Raises the InvalidCastException. public void InvalidCastException(bool when, string message, int errorCode) Parameters when bool A condition to throw the exception. message string The message. errorCode int The error code (HRESULT). InvalidCredentialException(bool, string, Exception) Raises the InvalidCredentialException(bool, string, Exception). public void InvalidCredentialException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. InvalidDataException(bool, string, Exception) Raises the InvalidDataException(bool, string, Exception). public void InvalidDataException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. InvalidOperationException(bool, string, Exception) Raises the InvalidOperationException(bool, string, Exception). public void InvalidOperationException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. KeyNotFoundException(bool, string, Exception) Raises the KeyNotFoundException(bool, string, Exception). public void KeyNotFoundException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. MissingFieldException(bool, string, Exception) Raises the MissingFieldException. public void MissingFieldException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. MissingFieldException(bool, string, string) Raises the MissingFieldException. public void MissingFieldException(bool when, string className = null, string fieldName = null) Parameters when bool A condition to throw the exception. className string The class name. fieldName string The field name. MissingMemberException(bool, string, Exception) Raises the MissingMemberException. public void MissingMemberException(bool when, string message, Exception innerException) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. MissingMemberException(bool, string, string) Raises the MissingMemberException. public void MissingMemberException(bool when, string className = null, string memberName = null) Parameters when bool A condition to throw the exception. className string The class name. memberName string The member name. MissingMethodException(bool, string, Exception) Raises the MissingMethodException. public void MissingMethodException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. MissingMethodException(bool, string, string) Raises the MissingMethodException. public void MissingMethodException(bool when, string className = null, string methodName = null) Parameters when bool A condition to throw the exception. className string The class name. methodName string The method name. NotImplementedException(bool, string, Exception) Raises the NotImplementedException(bool, string, Exception). public void NotImplementedException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. NotSupportedException(bool, string, Exception) Raises the NotSupportedException(bool, string, Exception). public void NotSupportedException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. NullReferenceException(bool, string, Exception) Raises the NullReferenceException(bool, string, Exception). public void NullReferenceException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. OperationCanceledException(bool, string, Exception, CancellationToken?) Raises the OperationCanceledException(bool, string, Exception, CancellationToken?). public void OperationCanceledException(bool when, string message = null, Exception innerException = null, CancellationToken? token = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. token CancellationToken? The cancellation token. PathTooLongException(bool, string, Exception) Raises the PathTooLongException(bool, string, Exception). public void PathTooLongException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. SerializationException(bool, string, Exception) Raises the SerializationException(bool, string, Exception). public void SerializationException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. TaskCanceledException(bool, string, Exception) Raises the TaskCanceledException. public void TaskCanceledException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. TaskCanceledException(bool, Task) Raises the TaskCanceledException. public void TaskCanceledException(bool when, Task task) Parameters when bool A condition to throw the exception. task Task The task. TimeoutException(bool, string, Exception) Raises the TimeoutException(bool, string, Exception). public void TimeoutException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. TypeLoadException(bool, string, Exception) Raises the TypeLoadException(bool, string, Exception). public void TypeLoadException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception. UnauthorizedAccessException(bool, string, Exception) Raises the UnauthorizedAccessException(bool, string, Exception). public void UnauthorizedAccessException(bool when, string message = null, Exception innerException = null) Parameters when bool A condition to throw the exception. message string The message. innerException Exception The inner exception."
  },
  "Heleonix.Guard/Heleonix.Guard.Host.html": {
    "href": "Heleonix.Guard/Heleonix.Guard.Host.html",
    "title": "Class Host | Heleonix",
    "keywords": "Class Host Namespace Heleonix.Guard Assembly Heleonix.Guard.dll Represents the entry point to code guards. public static class Host Inheritance object Host Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Properties Throw Gets the ExceptionRaiser. public static ExceptionRaiser Throw { get; } Property Value ExceptionRaiser The ExceptionRaiser. Methods When(bool) Provides a condition to throw an exception. Use when: [your condition] to throw an exception in C# 7.2 or later. public static bool When(bool when) Parameters when bool A condition to throw an exception. Returns bool The passed when value."
  },
  "Heleonix.Guard/Heleonix.Guard.html": {
    "href": "Heleonix.Guard/Heleonix.Guard.html",
    "title": "Namespace Heleonix.Guard | Heleonix",
    "keywords": "Namespace Heleonix.Guard Classes ExceptionRaiser Provides raising of exceptions with building of conditions to throw them. Host Represents the entry point to code guards."
  },
  "Heleonix.Guard/index.html": {
    "href": "Heleonix.Guard/index.html",
    "title": "Heleonix.Guard | Heleonix",
    "keywords": "Heleonix.Guard Provides performant guard functionality for methods to throw exceptions Install https://www.nuget.org/packages/Heleonix.Guard API See Heleonix.Guard Example using Heleonix.Guard; using Heleonix.Extensions; using static Heleonix.Guard.Host; public static class Test { public static void Main() { MyMethod(null); } public static void MyMethod(string param) { // C# 7.2+: Non-Trailing named arguments Throw.ArgumentNullException(when: param.IsNull(), nameof(param)); // OR // Prior to C# 7.2: You can use a helper method 'When' Throw.ArgumentNullException(When(param.IsNull()), nameof(param)); // OR Throw.ArgumentNullException(param == null, nameof(param)); // OR Throw.ArgumentNullException(When(param == null), nameof(param)); } } The Heleonix.Extensions provides many useful predicative extensions to build assertions, like IsNull(), IsNullOrEmptyOrWhiteSpace(), IsLessThan() etc. These extensions do not throw exceptions, so they will not overlap an exception to be really thrown. See Heleonix.Extensions for more details. The Host.Throw property returns a singleton instance of the Heleonix.Guard.ExceptionRaiser class, which provides methods to throw many existing exceptions, like ArgumentNullException, FileLoadException etc. See more via VisualStudio intellisense. The ExceptionRaiser returned by the Host.Throw is the singleton instance, so there is no creations of new objects every time, as it is usually implemented in fluent interfaces. Besides, it also provides ability to implement custom exception raisers via extension methods: using Heleonix.Guard; public static class ExceptionRaiserExtensions { #pragma warning disable CC0057 // Unused parameters public static void MyCustomException(this ExceptionRaiser raiser, bool when, int param1, string param2, object paramN, string message = null, Exception innerException = null) { if (when) { throw new MyCustomException(param1, param2, paramN, message, innerException); } } #pragma warning restore CC0057 // Unused parameters } and then use it, for example, as below: Throw.MyCustomException(when: param1.IsZero() || param2.IsNullOrEmpty() || paramN.IsNull(), \"some message\"); Contribution Guideline Create a fork from the main repository Implement whatever is needed Create a Pull Request. Make sure the assigned Checks pass successfully. Request review from the code owner Once approved, merge your Pull Request via Squash and merge IMPORTANT While merging, enter a Conventional Commits commit message. This commit message will be used in automatically generated Github Release Notes and NuGet Release Notes Monitor the Release: .NET / NuGet GitHub workflow to make sure your changes are delivered successfully In case of any issues, please contact heleonix.sln@gmail.com"
  },
  "Heleonix.Reflection/Heleonix.Reflection.Reflector.html": {
    "href": "Heleonix.Reflection/Heleonix.Reflection.Reflector.html",
    "title": "Class Reflector | Heleonix",
    "keywords": "Class Reflector Namespace Heleonix.Reflection Assembly Heleonix.Reflection.dll Provides functionality for working with reflection. public static class Reflector Inheritance object Reflector Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields DefaultBindingFlags The default binding flags. public const BindingFlags DefaultBindingFlags = Instance | Static | Public Field Value BindingFlags Methods CreateGetter<TObject, TReturn>(Expression<Func<TObject, TReturn>>) Creates a getter. Works with exactly specified types without conversion. This is the fastest implementation. public static Func<TObject, TReturn> CreateGetter<TObject, TReturn>(Expression<Func<TObject, TReturn>> memberPath) Parameters memberPath Expression<Func<TObject, TReturn>> The path to a member. Returns Func<TObject, TReturn> A compiled delegate to get a value or null if the memberPath is null. Type Parameters TObject The concrete type of the container's object. TReturn The concrete type of the member. Examples var getter = Reflector.CreateGetter(dt => dt.Date.Month); var value = getter(DateTime.Now); // value == DateTime.Now.Date.Month. CreateGetter<TObject, TReturn>(string, Type) Creates a getter. Can create getters with any convertable types for polimorphic usage. public static Func<TObject, TReturn> CreateGetter<TObject, TReturn>(string memberPath, Type containerType = null) Parameters memberPath string The path to a member. containerType Type A type of a container's object which contains the member. If null is specified, then TObject is used without conversion. Returns Func<TObject, TReturn> A compiled delegate to get a value or null if the memberPath is null or empty. Type Parameters TObject The type of the desired object in a delegate to create. TReturn The type of the desired member in a delegate to create. Examples var getter = Reflector.CreateGetter{object, object}(\"Date.Month\", typeof(DateTime)); var value = getter(DateTime.Now); // value == DateTime.Now.Date.Month. CreateSetter<TObject, TValue>(Expression<Func<TObject, TValue>>) Creates the setter. Works with exactly specified types without conversion. This is the fastest implementation. public static Action<TObject, TValue> CreateSetter<TObject, TValue>(Expression<Func<TObject, TValue>> memberPath) Parameters memberPath Expression<Func<TObject, TValue>> The path to a member. Returns Action<TObject, TValue> A compiled delegate to set a value or null if memberPath is null. Type Parameters TObject The type of the object. TValue The type of the final member. Examples public class Root { public Child Child { get; set; } = new Child(); } public class Child { public int Value { get; set; } } var setter = Reflector.CreateSetter{Root, int}(r => r.Child.Value); var root = new Root(); setter(root, 12345); // root.Child.Value == 12345. CreateSetter<TObject, TValue>(string, Type) Creates a setter. Can create setters with any convertable types for polimorphic usage. public static Action<TObject, TValue> CreateSetter<TObject, TValue>(string memberPath, Type containerType = null) Parameters memberPath string The path to a member. containerType Type A type of a container's object which contains the member. If null is specified, then TObject is used without conversion. Returns Action<TObject, TValue> A compiled delegate to set a value or null if the memberPath is null or empty. Type Parameters TObject The type of the desired object in a delegate to create. TValue The type of the desired member in a delegate to create. Examples public class Root { public Child Child { get; set; } = new Child(); } public class Child { public int Value { get; set; } } var setter = Reflector.CreateSetter{Root, int}(\"Child.Value\", typeof(Root)); var root = new Root(); setter(root, 12345); // root.Child.Value == 12345. GetInfo(object, Type, string, Type[], BindingFlags) Gets information about members. public static MemberInfo[] GetInfo(object instance, Type type, string memberPath, Type[] parameterTypes = null, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters instance object A root object. type Type A type of a root object. If instance is not null, then its type is used instead. memberPath string A path to a member. parameterTypes Type[] Types of parameters to find methods or constructors. If null is passed, then types of parameters are ignored. bindingFlags BindingFlags Binding flags to find members. Returns MemberInfo[] Information about found members or an empty array if no members are found or they are not reachable or they are not accessible. Examples var dt = DateTime.Now; var info = Reflector.GetInfo(instance: dt, type: null, memberPath: \"TimeOfDay.Negate\"); // info[0].Name == \"Negate\"; // info[0].MemberType == MemberTypes.Property. Exceptions TargetException An intermediate member on a path thrown an exception. See inner exception for details. GetMemberPath(LambdaExpression) Gets a path to a member using the specified (probably dynamically built) expression. public static string GetMemberPath(LambdaExpression memberPath) Parameters memberPath LambdaExpression An expression to find a member. Returns string A name of a member or an empty string if memberPath is null. . GetMemberPath<TObject>(Expression<Action<TObject>>) Gets a path to a member which returns void. public static string GetMemberPath<TObject>(Expression<Action<TObject>> memberPath) Parameters memberPath Expression<Action<TObject>> An expression to find a member. Returns string A path to a member. Type Parameters TObject A type of an object. Examples var path = Reflector.GetMemberPath{List{int}}(list => list.Clear()); // path: \"Clear\". GetMemberPath<TObject>(Expression<Func<TObject, object>>) Gets a path to a member which returns some type. public static string GetMemberPath<TObject>(Expression<Func<TObject, object>> memberPath) Parameters memberPath Expression<Func<TObject, object>> An expression to find a member. Returns string A path to a member. Type Parameters TObject A type of an object. Examples var path = Reflector.GetMemberPath{DateTime}(dt => dt.TimeOfDay.Negate()); // path: \"TimeOfDay.Negate\". GetTypes(string) Gets the types by a simple name (a name without namespace) in the calling assembly and in the assemblies loaded into the current domain. public static Type[] GetTypes(string simpleName) Parameters simpleName string A simple name of types to load. Returns Type[] An array of found types. Get<TReturn>(object, Type, string, out TReturn, BindingFlags) Gets a value by the provided path. public static bool Get<TReturn>(object instance, Type type, string memberPath, out TReturn value, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters instance object A root object. type Type A type of a root object. If instance is not null, then its type is used instead. memberPath string A path to a member. value TReturn A gotten value. bindingFlags BindingFlags Binding flags to find members. Returns bool true in case of success, otherwise false if memberPath is null or empty or instance is null and type is null or a target member or one of intermediate members was not found or a member is not static and its container is null or a target member or an intermediate member is neither PropertyInfo nor FieldInfo or a target value is not of type TReturn. Type Parameters TReturn A type of a value to be set with the target value. Examples var success = Reflector.Get(DateTime.Now, null, \"TimeOfDay.Hours\", out int value); // success == true; // value == DateTime.Now.TimeOfDay.Hours; or var success = Reflector.Get(typeof(int), null, \"CustomAttributes[0].AttributeType\", out int value); // success == true; // value == typeof(int).CustomAttributes.First().AttributeType; or var success = Reflector.Get(typeof(int), null, \"CustomAttributes[0]\", out int value); // success == true; // value == typeof(int).CustomAttributes.First(). Exceptions TargetException Target thrown an exception during execution. See inner exception for details. Invoke<TReturn>(object, Type, string, Type[], out TReturn, BindingFlags, params object[]) Invokes a method or constructor by the provided path. Use \"ctor\" to invoke constructors, i.e.\"Item.SubItem.ctor\". public static bool Invoke<TReturn>(object instance, Type type, string memberPath, Type[] parameterTypes, out TReturn returnValue, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public, params object[] arguments) Parameters instance object A root object. type Type A type of a root object. If instance is not null, then its runtime type is used instead. memberPath string A path to a member to invoke. parameterTypes Type[] Types of parameters to find a method by. Pass null to ignore parameters, or an empty array for parameterless methods. returnValue TReturn A value to be returned if a member is not void. bindingFlags BindingFlags Binding flags to find members. arguments object[] Arguments to be passed into a member to invoke. Returns bool true in case of success, otherwise false if memberPath is null or empty or instance is null and type is null or a target member or one of intermediate members was not found or an intermediate member is neither PropertyInfo nor FieldInfo or an intermediate member is not static and its container is null or a target member is not MethodBase or a target value is not of type TReturn. Type Parameters TReturn A type of a value to be returned. Examples var success = Reflector.Invoke( DateTime.Now, null, \"Date.AddYears\", new[] { typeof(int) }, out DateTime result, arguments: 10); // success == true; // result.Year == DateTime.Now.Date.Year + 10. Exceptions TargetException Target thrown an exception during execution. See inner exception for details. IsStatic(PropertyInfo) Determines whether the specified property is static by its getter (if it is defined) or by its setter (if it is defined). public static bool IsStatic(PropertyInfo info) Parameters info PropertyInfo The property information. Returns bool true if the specified property is static; otherwise, false. Set(object, Type, string, object, BindingFlags) Sets a provided value by the provided path. public static bool Set(object instance, Type type, string memberPath, object value, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters instance object A root object. type Type A type of a root object. If instance is not null, then its type is used instead. memberPath string A path to a member. value object A value to be set. bindingFlags BindingFlags Binding flags to find members. Returns bool true in case of success, otherwise false if memberPath is null or empty or instance is null and type is null or a target member or one of intermediate members was not found or a member is not static and its container is null or a target member or an intermediate member is neither PropertyInfo nor FieldInfo. Examples public class Root { public Child Child { get; set; } = new Child(); public Child[] Children { get; set; } = new Child[] { new Child(), new Child() }; } public class Child { public int Value { get; set; } } var root = new Root(); var success1 = Reflector.Set(root, null, \"Child.Value\", 111); var success2 = Reflector.Set(root, null, \"Children[0].Value\", 222); var success3 = Reflector.Set(root, null, \"Children[1]\", new Child() { Value = 333 }); // success1 == true; // success2 == true; // success3 == true; // root.Child.Value == 111; // root.Children[0].Value == 222; // root.Children[1].Value == 333. SetCoerced(object, Type, string, object, BindingFlags) Sets a provided value by the provided path with coercion into the target member type. public static bool SetCoerced(object instance, Type type, string memberPath, object value, BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public) Parameters instance object A root object. type Type A type of a root object. If instance is not null, then its type is used instead. memberPath string A path to a member. value object A value to be set. bindingFlags BindingFlags Binding flags to find members. Returns bool true in case of success, otherwise false if memberPath is null or empty or instance is null and type is null or a target member or one of intermediate members was not found or a member is not static and its container is null or a target member or an intermediate member is neither PropertyInfo nor FieldInfo. Examples public class Root { public Child Child { get; set; } = new Child(); public Child[] Children { get; set; } = new Child[] { new Child(), new Child() }; } public class Child { public int Value { get; set; } } var root = new Root(); var success1 = Reflector.Set(root, null, \"Child.Value\", 111); var success2 = Reflector.Set(root, null, \"Children[0].Value\", 222); var success3 = Reflector.Set(root, null, \"Children[1]\", new Child() { Value = 333 }); // success1 == true; // success2 == true; // success3 == true; // root.Child.Value == 111; // root.Children[0].Value == 222; // root.Children[1].Value == 333."
  },
  "Heleonix.Reflection/Heleonix.Reflection.html": {
    "href": "Heleonix.Reflection/Heleonix.Reflection.html",
    "title": "Namespace Heleonix.Reflection | Heleonix",
    "keywords": "Namespace Heleonix.Reflection Classes Reflector Provides functionality for working with reflection."
  },
  "Heleonix.Reflection/index.html": {
    "href": "Heleonix.Reflection/index.html",
    "title": "Heleonix.Reflection | Heleonix",
    "keywords": "Heleonix.Reflection Provides reflection functionality to search and invoke type members, search types, generate delegates etc. Install https://www.nuget.org/packages/Heleonix.Reflection API See Heleonix.Reflection Examples var dt = DateTime.Now; var info = Reflector.GetInfo(instance: dt, type: null, memberPath: \"TimeOfDay.Negate\"); // info[0].Name == \"Negate\"; // info[0].MemberType == MemberTypes.Property; var path = Reflector.GetMemberPath<DateTime>(dt => dt.TimeOfDay.Negate()); // path: \"TimeOfDay.Negate\" var success = Reflector.Get(DateTime.Now, null, \"TimeOfDay.Hours\", out int value); // success == true; // value == DateTime.Now.TimeOfDay.Hours; or var success = Reflector.Get(typeof(int), null, \"CustomAttributes[0].AttributeType\", out int value); // success == true; // value == typeof(int).CustomAttributes.First().AttributeType; or var success = Reflector.Get(typeof(int), null, \"CustomAttributes[0]\", out int value); // success == true; // value == typeof(int).CustomAttributes.First(); public class Root { public Child Child { get; set; } = new Child(); public Child[] Children { get; set; } = new Child[] { new Child(), new Child() }; } public class Child { public int Value { get; set; } } var root = new Root(); var success1 = Reflector.Set(root, null, \"Child.Value\", 111); var success2 = Reflector.Set(root, null, \"Children[0].Value\", 222); var success3 = Reflector.Set(root, null, \"Children[1]\", new Child() { Value = 333 }); // success1 == true; // success2 == true; // success3 == true; // root.Child.Value == 111; // root.Children[0].Value == 222; // root.Children[1].Value == 333; var success = Reflector.Invoke(DateTime.Now, null, \"Date.AddYears\", new[] { typeof(int) }, out DateTime result, arguments: 10); // success == true; // result.Year == DateTime.Now.Date.Year + 10; var getter = Reflector.CreateGetter(dt => dt.Date.Month); var value = getter(DateTime.Now); // value == DateTime.Now.Date.Month; public class Root { public Child Child { get; set; } = new Child(); } public class Child { public int Value { get; set; } } var setter = Reflector.CreateSetter{Root, int}(r => r.Child.Value); var root = new Root(); setter(root, 12345); // root.Child.Value == 12345; public class Root { public Child Child { get; set; } = new Child(); } public class Child { public int Value { get; set; } } var setter = Reflector.CreateSetter{Root, int}(\"Child.Value\", typeof(Root)); var root = new Root(); setter(root, 12345); // root.Child.Value == 12345; Contribution Guideline Create a fork from the main repository Implement whatever is needed Create a Pull Request. Make sure the assigned Checks pass successfully. You can watch the progress in the PR: .NET GitHub workflows Request review from the code owner Once approved, merge your Pull Request via Squash and merge IMPORTANT While merging, enter a Conventional Commits commit message. This commit message will be used in automatically generated Github Release Notes and NuGet Release Notes Monitor the Release: .NET / NuGet GitHub workflow to make sure your changes are delivered successfully In case of any issues, please contact heleonix.sln@gmail.com"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.AaaSpec.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.AaaSpec.html",
    "title": "Class AaaSpec | Heleonix",
    "keywords": "Class AaaSpec Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Represents the specification for the AAA tests pattern. public static class AaaSpec Inheritance object AaaSpec Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Act(Action) Builds the 'Act' step of the test. public static void Act(Action action) Parameters action Action The action. And(string, Action) Builds the 'And' step of the test. public static void And(string description, Action action) Parameters description string The description. action Action The action. Arrange(Action) Builds the 'Arrange' step of the test. public static void Arrange(Action action) Parameters action Action The action. Should(string, Action) Builds the 'Should' step of the test. public static void Should(string description, Action action) Parameters description string The description. action Action The action. Teardown(Action) Builds the 'Teardown' step of the test. public static void Teardown(Action action) Parameters action Action The action. When(string, Action) Builds the 'When' step of the test. public static void When(string description, Action action) Parameters description string The description. action Action The action."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.ComponentTestAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.ComponentTestAttribute.html",
    "title": "Class ComponentTestAttribute | Heleonix",
    "keywords": "Class ComponentTestAttribute Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Marks a test fixture as a component tests. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class ComponentTestAttribute : FixtureAttribute, IFixtureBuilder2, IFixtureBuilder Inheritance object Attribute BaseAttribute FixtureAttribute ComponentTestAttribute Implements IFixtureBuilder2 IFixtureBuilder Inherited Members FixtureAttribute.BuildFrom(ITypeInfo) FixtureAttribute.BuildFrom(ITypeInfo, IPreFilter) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ComponentTestAttribute() public ComponentTestAttribute() Properties Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<string, object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value string The name of the test. Type Gets or sets the type of the component to be tested. public Type Type { get; set; } Property Value Type The type of the component to be tested. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.MemberTestAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.MemberTestAttribute.html",
    "title": "Class MemberTestAttribute | Heleonix",
    "keywords": "Class MemberTestAttribute Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Represents the attribute for testing of compononts' members, like methods, constructors, properties. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class MemberTestAttribute : TestAttribute, ISimpleTestBuilder, IApplyToContext Inheritance object Attribute BaseAttribute TestAttribute MemberTestAttribute Implements ISimpleTestBuilder IApplyToContext Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors MemberTestAttribute() public MemberTestAttribute() Properties Name Gets or sets the name. public string Name { get; set; } Property Value string The name. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<string, object> The properties. TestName Gets the test name. protected override string TestName { get; } Property Value string The test name. Methods ApplyToContext(TestExecutionContext) public void ApplyToContext(TestExecutionContext context) Parameters context TestExecutionContext BuildFrom(IMethodInfo, Test) Builds a test method. public override TestMethod BuildFrom(IMethodInfo method, Test suite) Parameters method IMethodInfo The method. suite Test The suite. Returns TestMethod The test method. See Also TestAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.html",
    "title": "Namespace Heleonix.Testing.NUnit.Aaa | Heleonix",
    "keywords": "Namespace Heleonix.Testing.NUnit.Aaa Classes AaaSpec Represents the specification for the AAA tests pattern. ComponentTestAttribute Marks a test fixture as a component tests. MemberTestAttribute Represents the attribute for testing of compononts' members, like methods, constructors, properties."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.BaseAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.BaseAttribute.html",
    "title": "Class BaseAttribute | Heleonix",
    "keywords": "Class BaseAttribute Namespace Heleonix.Testing.NUnit Assembly Heleonix.Testing.NUnit.dll Represents the base attribute for all other tests attributes. public abstract class BaseAttribute : Attribute Inheritance object Attribute BaseAttribute Derived FixtureAttribute TestAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors BaseAttribute() protected BaseAttribute() Properties Properties Gets the properties. protected virtual IDictionary<string, object> Properties { get; } Property Value IDictionary<string, object> The properties. TestName Gets the name of the test. protected abstract string TestName { get; } Property Value string The name of the test. See Also Attribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.BddSpec.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.BddSpec.html",
    "title": "Class BddSpec | Heleonix",
    "keywords": "Class BddSpec Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Represents the specification for the BDD tests pattern. public static class BddSpec Inheritance object BddSpec Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AfterEach(Action) Builds the 'AfterEach' step of the test. public static void AfterEach(Action action) Parameters action Action The action. And(string, Action) Builds the 'And' step of the test. public static void And(string description, Action action) Parameters description string The description. action Action The action. BeforeEach(Action) Builds the 'BeforeEach' step of the test. public static void BeforeEach(Action action) Parameters action Action The action. Given(string, Action) Builds the 'Given' step of the test. public static void Given(string description, Action action) Parameters description string The description. action Action The action. Then(string, Action) Builds the 'Then' step of the test. public static void Then(string description, Action action) Parameters description string The description. action Action The action. When(string, Action) Builds the 'When' step of the test. public static void When(string description, Action action) Parameters description string The description. action Action The action."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.FeatureAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.FeatureAttribute.html",
    "title": "Class FeatureAttribute | Heleonix",
    "keywords": "Class FeatureAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks a test fixture as a feature tests. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class FeatureAttribute : FixtureAttribute, IFixtureBuilder2, IFixtureBuilder Inheritance object Attribute BaseAttribute FixtureAttribute FeatureAttribute Implements IFixtureBuilder2 IFixtureBuilder Inherited Members FixtureAttribute.BuildFrom(ITypeInfo) FixtureAttribute.BuildFrom(ITypeInfo, IPreFilter) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors FeatureAttribute() public FeatureAttribute() Properties Name Gets or sets the name. public string Name { get; set; } Property Value string The name. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<string, object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value string The name of the test. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.ScenarioAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.ScenarioAttribute.html",
    "title": "Class ScenarioAttribute | Heleonix",
    "keywords": "Class ScenarioAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks a test a a scenario test. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public sealed class ScenarioAttribute : TestAttribute, ISimpleTestBuilder, IApplyToContext Inheritance object Attribute BaseAttribute TestAttribute ScenarioAttribute Implements ISimpleTestBuilder IApplyToContext Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ScenarioAttribute() public ScenarioAttribute() Properties Name Gets or sets the name of the scenario. public string Name { get; set; } Property Value string The name of the scenario. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<string, object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value string The name of the test. Methods ApplyToContext(TestExecutionContext) public void ApplyToContext(TestExecutionContext context) Parameters context TestExecutionContext BuildFrom(IMethodInfo, Test) Build a TestMethod from the provided MethodInfo. public override TestMethod BuildFrom(IMethodInfo method, Test suite) Parameters method IMethodInfo The method to be used as a test. suite Test The TestSuite to which the method will be added. Returns TestMethod A TestMethod object. See Also TestAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.StoryAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.StoryAttribute.html",
    "title": "Class StoryAttribute | Heleonix",
    "keywords": "Class StoryAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks test fixture as a story tests. [AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)] public sealed class StoryAttribute : FixtureAttribute, IFixtureBuilder2, IFixtureBuilder Inheritance object Attribute BaseAttribute FixtureAttribute StoryAttribute Implements IFixtureBuilder2 IFixtureBuilder Inherited Members FixtureAttribute.BuildFrom(ITypeInfo) FixtureAttribute.BuildFrom(ITypeInfo, IPreFilter) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors StoryAttribute() public StoryAttribute() Properties AsA Gets or sets an 'As a...' description. public string AsA { get; set; } Property Value string The 'As a...' description. IWant Gets or sets an 'I want...' description. public string IWant { get; set; } Property Value string The 'I want..' description. Id Gets or sets an id of the story. public string Id { get; set; } Property Value string The id of the story. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<string, object> The properties. SoThat Gets or sets an 'So that...' description. public string SoThat { get; set; } Property Value string The 'So that...' description. Summary Gets or sets a summary of a story. public string Summary { get; set; } Property Value string A summary of a story. TestName Gets the name of the test. protected override string TestName { get; } Property Value string The name of the test. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.html",
    "title": "Namespace Heleonix.Testing.NUnit.Bdd | Heleonix",
    "keywords": "Namespace Heleonix.Testing.NUnit.Bdd Classes BddSpec Represents the specification for the BDD tests pattern. FeatureAttribute Marks a test fixture as a feature tests. ScenarioAttribute Marks a test a a scenario test. StoryAttribute Marks test fixture as a story tests."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.FixtureAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.FixtureAttribute.html",
    "title": "Class FixtureAttribute | Heleonix",
    "keywords": "Class FixtureAttribute Namespace Heleonix.Testing.NUnit Assembly Heleonix.Testing.NUnit.dll Represents the base class for test fixture attributes. public abstract class FixtureAttribute : BaseAttribute, IFixtureBuilder2, IFixtureBuilder Inheritance object Attribute BaseAttribute FixtureAttribute Implements IFixtureBuilder2 IFixtureBuilder Derived ComponentTestAttribute FeatureAttribute StoryAttribute Inherited Members BaseAttribute.Properties BaseAttribute.TestName Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors FixtureAttribute() protected FixtureAttribute() Methods BuildFrom(ITypeInfo) Build one or more TestFixtures from type provided. At least one non-null TestSuite must always be returned, since the method is generally called because the user has marked the target class as a fixture. If something prevents the fixture from being used, it will be returned nonetheless, labelled as non-runnable. public virtual IEnumerable<TestSuite> BuildFrom(ITypeInfo typeInfo) Parameters typeInfo ITypeInfo The type info of the fixture to be used. Returns IEnumerable<TestSuite> A TestSuite object or one derived from TestSuite. BuildFrom(ITypeInfo, IPreFilter) Builds any number of test fixtures from the specified type. public IEnumerable<TestSuite> BuildFrom(ITypeInfo typeInfo, IPreFilter filter) Parameters typeInfo ITypeInfo The type info of the fixture to be used. filter IPreFilter PreFilter to be used to select methods. Returns IEnumerable<TestSuite> A list of test suites. See Also BaseAttribute IFixtureBuilder NUnit.Framework.Interfaces.IApplyToTest"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.TestAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.TestAttribute.html",
    "title": "Class TestAttribute | Heleonix",
    "keywords": "Class TestAttribute Namespace Heleonix.Testing.NUnit Assembly Heleonix.Testing.NUnit.dll Represents the base class test attributes. public abstract class TestAttribute : BaseAttribute, ISimpleTestBuilder Inheritance object Attribute BaseAttribute TestAttribute Implements ISimpleTestBuilder Derived MemberTestAttribute ScenarioAttribute Inherited Members BaseAttribute.Properties BaseAttribute.TestName Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors TestAttribute() protected TestAttribute() Methods BuildFrom(IMethodInfo, Test) Build a TestMethod from the provided MethodInfo. public virtual TestMethod BuildFrom(IMethodInfo method, Test suite) Parameters method IMethodInfo The method to be used as a test. suite Test The TestSuite to which the method will be added. Returns TestMethod A TestMethod object. See Also BaseAttribute ISimpleTestBuilder"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.html",
    "title": "Namespace Heleonix.Testing.NUnit | Heleonix",
    "keywords": "Namespace Heleonix.Testing.NUnit Classes BaseAttribute Represents the base attribute for all other tests attributes. FixtureAttribute Represents the base class for test fixture attributes. TestAttribute Represents the base class test attributes."
  },
  "Heleonix.Testing/index.html": {
    "href": "Heleonix.Testing/index.html",
    "title": "Heleonix.Testing | Heleonix",
    "keywords": "Heleonix.Testing The library for writing tests in BDD and AAA styles Install https://www.nuget.org/packages/Heleonix.Testing.NUnit API See Heleonix.Testing.NUnit AAA: Arrange Act Assert Structure using global::NUnit.Framework; using Heleonix.Testing.NUnit.Aaa; using static Heleonix.Testing.NUnit.Aaa.AaaSpec; /// <summary> /// Tests the <see cref=\"MyComponent\"/>. /// </summary> [ComponentTest(Type = typeof(MyComponent))] public static class MyComponentTests { /// <summary> /// Tests the <see cref=\"MyComponent.Member1\"/>. /// </summary> [MemberTest(Name = nameof(MyComponent.Member1))] public static void Member1() { Arrange(() => { }); Act(() => { }); Teardown(() => { }); When(\"the condition #1 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #1\", () => { }); }); When(\"the condition #2 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #2\", () => { }); }); } /// <summary> /// Tests the <see cref=\"MyComponent.Member2\"/>. /// </summary> [MemberTest(Name = nameof(MyComponent.Member2))] public static void Member2() { Arrange(() => { }); Act(() => { }); Teardown(() => { }); When(\"the action #1 is executed\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #1\", () => { Assert.Fail(); }); And(\"the condition #1 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #2\", () => { }); }); }); } } Tests Output BDD: Behavior Driven Development Structure using global::NUnit.Framework; using Heleonix.Testing.NUnit.Bdd; using static Heleonix.Testing.NUnit.Bdd.BddSpec; /// <summary> /// Tests the TheCoolStory. /// </summary> [Feature(Name = \"The Cool Feature\")] OR [Story( Id = \"111\", Summary = \"The cool story\", AsA = \"Product owner\", IWant = \"a cool story\", SoThat = \"I earn a lot of money\")] public static class TheCoolStory { /// <summary> /// Tests the Scenario. /// </summary> [Scenario(Name = \"Earn a lot of money in the story\")] public static void Scenario() { Given(\"the precondition #1\", () => { BeforeEach(() => { }); AfterEach(() => { }); When(\"the action #1 is executed\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #1 happens\", () => { }); And(\"the condition #1 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #2 happens\", () => { Assert.Fail(); }); }); }); And(\"condition #2 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); When(\"the action #2 is executed\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #3 happens\", () => { }); And(\"the condition #3 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #4 happens\", () => { }); }); }); }); }); } } Tests Output Contribution Guideline Create a fork from the main repository Implement whatever is needed Create a Pull Request. Make sure the assigned Checks pass successfully. You can watch the progress in the PR: .NET GitHub workflows Request review from the code owner Once approved, merge your Pull Request via Squash and merge IMPORTANT While merging, enter a Conventional Commits commit message. This commit message will be used in automatically generated Github Release Notes and NuGet Release Notes Monitor the Release: .NET / NuGet GitHub workflow to make sure your changes are delivered successfully In case of any issues, please contact heleonix.sln@gmail.com"
  },
  "Heleonix.Validation/index.html": {
    "href": "Heleonix.Validation/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Heleonix | Heleonix",
    "keywords": "Heleonix Heleonix is a common name for a set of free open source libraries to speed up and simplify routine development."
  }
}