{
  "Heleonix.Build/api/Heleonix.Build.Tasks.DirectoryClean.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.DirectoryClean.html",
    "title": "Class DirectoryClean | Heleonix",
    "keywords": "Class DirectoryClean Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Deletes contents of a directory, but not the directory itself. public class DirectoryClean : BaseTask Inheritance System.Object BaseTask DirectoryClean Constructors DirectoryClean() public DirectoryClean() Properties CleanedDirs Gets or sets the cleaned directories paths [Output]. public ITaskItem[] CleanedDirs { get; set; } Property Value ITaskItem[] Dirs Gets or sets directories to clean. public ITaskItem[] Dirs { get; set; } Property Value ITaskItem[] Methods ExecuteInternal() Deletes contents of a directory, but not the directory itself. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.FileCopy.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.FileCopy.html",
    "title": "Class FileCopy | Heleonix",
    "keywords": "Class FileCopy Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Copies files from sources into destinations. public class FileCopy : BaseTask Inheritance System.Object BaseTask FileCopy Constructors FileCopy() public FileCopy() Properties CopiedFiles Gets or sets a list of successfully copied files [Output]. public ITaskItem[] CopiedFiles { get; set; } Property Value ITaskItem[] DestinationDirs Gets or sets destinations to copy files to. public ITaskItem[] DestinationDirs { get; set; } Property Value ITaskItem[] Remarks If number of destinations equals to number of files, then files are copied into those directories. If destination is a single directory, then files are copied into that directory. Files Gets or sets files to copy. public ITaskItem[] Files { get; set; } Property Value ITaskItem[] Examples File path: C:\\Files\\SubDir1\\SubDir2\\SubDir3\\file.txt WithSubDirsFrom: C:\\Files\\SubDir1 Destination: D:\\Destination Result: file is copied into D:\\Destination\\SubDir2\\SubDir3\\file.txt. Remarks Metadata: 'WithSubDirsFrom' - if defined, copies a file into sub folders starting from the end of the defined root path. It is used to keep folders hierarchy. Overwrite Gets or sets a value indicating whether determines whether to overwrite destination file or ignore. public bool Overwrite { get; set; } Property Value Boolean Methods ExecuteInternal() Updates a file with specified regular expression and content. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.FileRazorGenerate.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.FileRazorGenerate.html",
    "title": "Class FileRazorGenerate | Heleonix",
    "keywords": "Class FileRazorGenerate Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Generates a file using the passed Razor template file and passed list of data items. public class FileRazorGenerate : BaseTask Inheritance System.Object BaseTask FileRazorGenerate Examples @using System @using Microsoft.Build.Framework @inherits RazorEngineCore.RazorEngineTemplateBase<ITaskItem[]> @DateTime.UtcNow.ToShortDateString() @foreach (var item in Model) { <text>- </text> @item.GetMetadata(&quot;description&quot;) @: } Constructors FileRazorGenerate() public FileRazorGenerate() Properties Data Gets or sets data items to be passed to the template file. public ITaskItem[] Data { get; set; } Property Value ITaskItem[] GeneratedFile Gets or sets path to the generated file. public string GeneratedFile { get; set; } Property Value String TemplateFile Gets or sets path to the Razor template file. public string TemplateFile { get; set; } Property Value String Methods ExecuteInternal() Executes the task. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.FileRead.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.FileRead.html",
    "title": "Class FileRead | Heleonix",
    "keywords": "Class FileRead Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Gets content from file by specified regular expression. public class FileRead : BaseTask Inheritance System.Object BaseTask FileRead Constructors FileRead() public FileRead() Properties File Gets or sets the file path. public string File { get; set; } Property Value String Matches Gets or sets found matches [Output]. public ITaskItem[] Matches { get; set; } Property Value ITaskItem[] RegExp Gets or sets the .NET regular expression to find content. public string RegExp { get; set; } Property Value String RegExpOptions Gets or sets the .NET regular expression options. public string RegExpOptions { get; set; } Property Value String Methods ExecuteInternal() Reads a file with specified regular expression and content. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.FileSystemSearch.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.FileSystemSearch.html",
    "title": "Class FileSystemSearch | Heleonix",
    "keywords": "Class FileSystemSearch Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Searches items in the file system. public class FileSystemSearch : BaseTask Inheritance System.Object BaseTask FileSystemSearch Constructors FileSystemSearch() public FileSystemSearch() Properties ContentRegExp Gets or sets the .NET regular expression to include by content. public string ContentRegExp { get; set; } Property Value String ContentRegExpOptions Gets or sets the .NET regular expression options to include by content. public string ContentRegExpOptions { get; set; } Property Value String Direction Gets or sets the search direction. public string Direction { get; set; } Property Value String Remarks Possible values: Up Down Default is \"Down\". FoundDirs Gets or sets the found directories [Output]. public ITaskItem[] FoundDirs { get; set; } Property Value ITaskItem[] FoundFiles Gets or sets the found files [Output]. public ITaskItem[] FoundFiles { get; set; } Property Value ITaskItem[] FoundItems Gets or sets All the found items [Output]. public ITaskItem[] FoundItems { get; set; } Property Value ITaskItem[] PathRegExp Gets or sets the .NET regular expression to include found paths. Use only / for path separators. public string PathRegExp { get; set; } Property Value String PathRegExpOptions Gets or sets the .NET regular expression options to include found paths. Default is \"IgnoreCase\". public string PathRegExpOptions { get; set; } Property Value String StartDir Gets or sets the directory to start from, including that directory. public string StartDir { get; set; } Property Value String Types Gets or sets types of items to search. public string Types { get; set; } Property Value String Remarks Possible values: Files Directories All Default is \"All\". Methods ExecuteInternal() Searches items in the file system. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.FileUpdate.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.FileUpdate.html",
    "title": "Class FileUpdate | Heleonix",
    "keywords": "Class FileUpdate Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Updates a file with specified regular expression and content. public class FileUpdate : BaseTask Inheritance System.Object BaseTask FileUpdate Constructors FileUpdate() public FileUpdate() Properties File Gets or sets the file path. public string File { get; set; } Property Value String RegExp Gets or sets the .NET regular expression to find content to replace. public string RegExp { get; set; } Property Value String RegExpOptions Gets or sets the .NET regular expression options. public string RegExpOptions { get; set; } Property Value String Replacement Gets or sets content to replace with. public string Replacement { get; set; } Property Value String Methods ExecuteInternal() Updates a file with specified regular expression and content. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.FileValidate.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.FileValidate.html",
    "title": "Class FileValidate | Heleonix",
    "keywords": "Class FileValidate Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Validates that contents of specified files corresponds to specified regex patterns. public class FileValidate : BaseTask Inheritance System.Object BaseTask FileValidate Constructors FileValidate() public FileValidate() Properties Files Gets or sets file paths with regex patterns in custom metadata to validate. public ITaskItem[] Files { get; set; } Property Value ITaskItem[] RegExpOptions Gets or sets the .NET regular expression options. Default value is \"IgnoreCase\". public string RegExpOptions { get; set; } Property Value String Methods ExecuteInternal() Reads a file with specified regular expression and content. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.GitHubCommitChangeLog.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.GitHubCommitChangeLog.html",
    "title": "Class GitHubCommitChangeLog | Heleonix",
    "keywords": "Class GitHubCommitChangeLog Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Collects a changelog from a GitHub repository using the GitHub API. public class GitHubCommitChangeLog : BaseTask Inheritance System.Object BaseTask GitHubCommitChangeLog Constructors GitHubCommitChangeLog() public GitHubCommitChangeLog() Properties ChangeLogRegExp Gets or sets a regular expression to capture a change for the change log. public string ChangeLogRegExp { get; set; } Property Value String Changes Gets or sets the list of changes with metadata as captured groups names and values [Output]. public ITaskItem[] Changes { get; set; } Property Value ITaskItem[] GitHubRepositoryApiUrl Gets or sets the url of the GitHub API for the repository. public string GitHubRepositoryApiUrl { get; set; } Property Value String MajorChangeRegExp Gets or sets a regular expression to identify a major change. public string MajorChangeRegExp { get; set; } Property Value String MinorChangeRegExp Gets or sets a regular expression to identify a minor change. public string MinorChangeRegExp { get; set; } Property Value String PatchChangeRegExp Gets or sets a regular expression to identify a patch change. public string PatchChangeRegExp { get; set; } Property Value String RegExpOptions Gets or sets the .NET regular expression options for regexp patterns. public string RegExpOptions { get; set; } Property Value String Token Gets or sets a personal access token to authorize to the GitHub API. public string Token { get; set; } Property Value String UserAgent Gets or sets the User-Agent request header. public string UserAgent { get; set; } Property Value String Version Gets or sets the calculated version based on the change conventions [Output]. public string Version { get; set; } Property Value String VersionTagRegExp Gets or sets a regular expression to extract a version from a tag name of the latest release in format 11.22.33. public string VersionTagRegExp { get; set; } Property Value String Methods ExecuteInternal() Executes the task. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.GitHubRelease.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.GitHubRelease.html",
    "title": "Class GitHubRelease | Heleonix",
    "keywords": "Class GitHubRelease Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Creates a release on GitHub using the GitHub API. public class GitHubRelease : BaseTask Inheritance System.Object BaseTask GitHubRelease Constructors GitHubRelease() public GitHubRelease() Properties Body Gets or sets release notes as a text string. public string Body { get; set; } Property Value String GitHubRepositoryApiUrl Gets or sets the url of the GitHub API for the repository. public string GitHubRepositoryApiUrl { get; set; } Property Value String IsDraft Gets or sets a value indicating whether to create a draft (unpublished) release, or a published one. public bool IsDraft { get; set; } Property Value Boolean IsPrerelease Gets or sets a value indicating whether to identify the release as a prerelease, or as a full release. public bool IsPrerelease { get; set; } Property Value Boolean Name Gets or sets a name of the release. If not specified, the tag name is used. public string Name { get; set; } Property Value String TagName Gets or sets a name of the tag to create and/or from which the release should be created. public string TagName { get; set; } Property Value String TagSource Gets or sets any branch or commit SHA from which the tag should be created. It is ignored if the tag already exists. Otherwise, name of the default branch (usually master) is used. public string TagSource { get; set; } Property Value String Token Gets or sets a personal access token to authorize to the GitHub API. public string Token { get; set; } Property Value String UserAgent Gets or sets the User-Agent request header. public string UserAgent { get; set; } Property Value String Methods ExecuteInternal() Executes the GitHubRelease. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.NUnit.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.NUnit.html",
    "title": "Class NUnit | Heleonix",
    "keywords": "Class NUnit Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Runs the NUnit. public class NUnit : BaseTask Inheritance System.Object BaseTask NUnit Constructors NUnit() public NUnit() Properties AgentsNumber Gets or sets the agents number. public int AgentsNumber { get; set; } Property Value Int32 Asserts Gets or sets the count of asserts [Output]. public int Asserts { get; set; } Property Value Int32 Configuration Gets or sets the project configuration to load, i.e. \"Debug\", \"Release\". public string Configuration { get; set; } Property Value String DomainIsolation Gets or sets domain isolation for test assemblies. public string DomainIsolation { get; set; } Property Value String Remarks If not specified, defaults to \"Separate\" for a single assembly or \"Multiple\" for more than one. Possible values: None Single Multiple Duration Gets or sets the duration of tests running [Output]. public float Duration { get; set; } Property Value Single EndTime Gets or sets the end time [Output]. public string EndTime { get; set; } Property Value String Failed Gets or sets the count of failed tests [Output]. public int Failed { get; set; } Property Value Int32 Framework Gets or sets the framework to use for tests. Examples: \"mono\", \"net-4.5\", \"v4.0\", \"2.0\", \"mono-4.0\". public string Framework { get; set; } Property Value String Inconclusive Gets or sets the count of inconclusive tests [Output]. public int Inconclusive { get; set; } Property Value Int32 NUnitConsoleExe Gets or sets the NUnit console executable path. public string NUnitConsoleExe { get; set; } Property Value String NUnitProjectFileOrTestFiles Gets or sets the NUnit project or tests files paths. public ITaskItem[] NUnitProjectFileOrTestFiles { get; set; } Property Value ITaskItem[] Passed Gets or sets the count of passed tests [Output]. public int Passed { get; set; } Property Value Int32 ProcessIsolation Gets or sets process isolation for test assemblies. public string ProcessIsolation { get; set; } Property Value String Remarks If not specified, defaults to \"Separate\" for a single assembly or \"Multiple\" for more than one. By default, processes are run in parallel. Possible values: Single Separate Multiple ShadowCopy Gets or sets a value indicating whether to copy loaded assemblies to the shadow copy directory. public bool ShadowCopy { get; set; } Property Value Boolean Skipped Gets or sets the count of skipped tests [Output]. public int Skipped { get; set; } Property Value Int32 StartTime Gets or sets the start time [Output]. public string StartTime { get; set; } Property Value String TestCases Gets or sets the count of test cases [Output]. public int TestCases { get; set; } Property Value Int32 TestFilter Gets or sets a tests filter to filter tests to run. public string TestFilter { get; set; } Property Value String Remarks For more details, see NUnit Test Selection Language. TestListFile Gets or sets the tests list file path. public string TestListFile { get; set; } Property Value String Remarks File is containing a list of tests to run or explore, one per line. TestOutputFile Gets or sets the tests output file path. public string TestOutputFile { get; set; } Property Value String TestParameters Gets or sets the tests parameters, specified in the form name=value. public string TestParameters { get; set; } Property Value String Remarks Multiple parameters may be specified, separated by semicolons. TestResultFile Gets or sets the NUnit tests result file path. public string TestResultFile { get; set; } Property Value String Total Gets or sets the total count of tests [Output]. public int Total { get; set; } Property Value Int32 TraceLevel Gets or sets the trace level. Default is \"Warning\". public string TraceLevel { get; set; } Property Value String Remarks Possible values: Off Error Warning Info Verbose UseTeamCityServiceMessages Gets or sets a value indicating whether to use TeamCity service messages. public bool UseTeamCityServiceMessages { get; set; } Property Value Boolean WorkingDir Gets or sets the working directory to run the executable in. public string WorkingDir { get; set; } Property Value String Methods ExecuteInternal() Executes the NUnit. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.NugetPush.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.NugetPush.html",
    "title": "Class NugetPush | Heleonix",
    "keywords": "Class NugetPush Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Runs the Nuget push command. public class NugetPush : BaseTask Inheritance System.Object BaseTask NugetPush Constructors NugetPush() public NugetPush() Properties APIKey Gets or sets the API key. public string APIKey { get; set; } Property Value String ConfigFile Gets or sets the configuration file path. public string ConfigFile { get; set; } Property Value String NugetExe Gets or sets the Nuget executable path. public string NugetExe { get; set; } Property Value String PackageFile Gets or sets the package file path. public string PackageFile { get; set; } Property Value String SourceURL Gets or sets the source path. public string SourceURL { get; set; } Property Value String Verbosity Gets or sets the verbosity of the command. Default is \"Normal\". public string Verbosity { get; set; } Property Value String Remarks Possible values: normal quiet detailed WorkingDir Gets or sets the working directory to run the executable in. public string WorkingDir { get; set; } Property Value String Methods ExecuteInternal() Executes the Nuget \"push\" command. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.OpenCover.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.OpenCover.html",
    "title": "Class OpenCover | Heleonix",
    "keywords": "Class OpenCover Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Runs the OpenCover. public class OpenCover : BaseTask Inheritance System.Object BaseTask OpenCover Constructors OpenCover() public OpenCover() Properties BranchCoverage Gets or sets the branch coverage, in range: 0% - 100% [Output]. public int BranchCoverage { get; set; } Property Value Int32 ClassCoverage Gets or sets the class coverage, in range: 0% - 100% [Output]. public int ClassCoverage { get; set; } Property Value Int32 CoverageResultFile Gets or sets the coverage result output file path. public string CoverageResultFile { get; set; } Property Value String ExcludeByAttributeFilters Gets or sets the filters to exclude code from coverage by attribute in format: Name*;*Attribute. public string ExcludeByAttributeFilters { get; set; } Property Value String ExcludeDirs Gets or sets the directories to exclude assemblies from coverage loaded from these directories. public ITaskItem[] ExcludeDirs { get; set; } Property Value ITaskItem[] FilePathRegExp Gets or sets the .NET regular expression to replace file paths of covered files. public string FilePathRegExp { get; set; } Property Value String FilePathRegExpOptions Gets or sets the .NET regular expression options to replace paths. Default is \"IgnoreCase\". public string FilePathRegExpOptions { get; set; } Property Value String FilePathReplacement Gets or sets the file path to replace the paths of covered files with. public string FilePathReplacement { get; set; } Property Value String Filters Gets or sets the filters of binaries to cover in format: +[ModuleName*]ClassName -[ModuleName]*ClassName. public string Filters { get; set; } Property Value String LineCoverage Gets or sets the line coverage, in range: 0% - 100% [Output]. public int LineCoverage { get; set; } Property Value Int32 MaxCyclomaticComplexity Gets or sets the maximum cyclomatic complexity [Output]. public int MaxCyclomaticComplexity { get; set; } Property Value Int32 MaxVisitCount Gets or sets the maximum visits count. Limiting can improve performance. public int MaxVisitCount { get; set; } Property Value Int32 MethodCoverage Gets or sets the method coverage, in range: 0% - 100% [Output]. public int MethodCoverage { get; set; } Property Value Int32 MinBranchCoverage Gets or sets the minimum branch coverage, in range: 0% - 100%. public int MinBranchCoverage { get; set; } Property Value Int32 MinClassCoverage Gets or sets the minimum class coverage, in range: 0% - 100%. public int MinClassCoverage { get; set; } Property Value Int32 MinCyclomaticComplexity Gets or sets the minimum cyclomatic complexity [Output]. public int MinCyclomaticComplexity { get; set; } Property Value Int32 MinLineCoverage Gets or sets the minimum line coverage, in range: 0% - 100%. public int MinLineCoverage { get; set; } Property Value Int32 MinMethodCoverage Gets or sets the minimum method coverage, in range: 0% - 100%. public int MinMethodCoverage { get; set; } Property Value Int32 OpenCoverExe Gets or sets the OpenCover executable path. public string OpenCoverExe { get; set; } Property Value String PdbSearchDirs Gets or sets the PDB search directories path. public ITaskItem[] PdbSearchDirs { get; set; } Property Value ITaskItem[] Register Gets or sets the type of registration of the OpenCover profiler. public string Register { get; set; } Property Value String Remarks Possible values: auto user path32 path64 ShowUnvisited Gets or sets a value indicating whether show unvisited methods and classes after coverage finishes and results are presented. public bool ShowUnvisited { get; set; } Property Value Boolean Target Gets or sets the target executable path with command line arguments and its type in metadata. public ITaskItem Target { get; set; } Property Value ITaskItem TotalBranches Gets or sets the total branches count [Output]. public long TotalBranches { get; set; } Property Value Int64 TotalClasses Gets or sets the total classes count [Output]. public long TotalClasses { get; set; } Property Value Int64 TotalLines Gets or sets the total lines count [Output]. public long TotalLines { get; set; } Property Value Int64 TotalMethods Gets or sets the total methods count [Output]. public long TotalMethods { get; set; } Property Value Int64 VisitedBranches Gets or sets the visited branches count [Output]. public long VisitedBranches { get; set; } Property Value Int64 VisitedClasses Gets or sets the visited classes count [Output]. public long VisitedClasses { get; set; } Property Value Int64 VisitedLines Gets or sets the visited lines count [Output]. public long VisitedLines { get; set; } Property Value Int64 VisitedMethods Gets or sets the visited methods count [Output]. public long VisitedMethods { get; set; } Property Value Int64 WorkingDir Gets or sets the working directory to run the executable in. public string WorkingDir { get; set; } Property Value String Methods ExecuteInternal() Executes the OpenCover. protected override void ExecuteInternal() See Also BaseTask"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.ReportGenerator.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.ReportGenerator.html",
    "title": "Class ReportGenerator | Heleonix",
    "keywords": "Class ReportGenerator Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Generates HTML report using the ReportGenerator tool. public class ReportGenerator : BaseTask Inheritance System.Object BaseTask ReportGenerator Constructors ReportGenerator() public ReportGenerator() Properties ReportDir Gets or sets the report directory path to save report to. public string ReportDir { get; set; } Property Value String ReportGeneratorExe Gets or sets the ReportGenerator executable path. public string ReportGeneratorExe { get; set; } Property Value String ReportTypes Gets or sets the report types, separated by semicolon. public string ReportTypes { get; set; } Property Value String Remarks Possible values: Badges Html HtmlSummary Latex LatexSummary TextSummary Xml XmlSummary ResultFiles Gets or sets the results files paths. public ITaskItem[] ResultFiles { get; set; } Property Value ITaskItem[] Verbosity Gets or sets the verbosity. Default is \"Info\". public string Verbosity { get; set; } Property Value String Remarks Possible values: Error Info Verbose WorkingDir Gets or sets the working directory to run the executable in. public string WorkingDir { get; set; } Property Value String Methods ExecuteInternal() Executes the ReportUnit. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.ReportUnit.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.ReportUnit.html",
    "title": "Class ReportUnit | Heleonix",
    "keywords": "Class ReportUnit Namespace Heleonix.Build.Tasks Assembly Heleonix.Build.dll Generates HTML report using the ReportUnit tool. public class ReportUnit : BaseTask Inheritance System.Object BaseTask ReportUnit Constructors ReportUnit() public ReportUnit() Properties ReportFile Gets or sets the report file path. public string ReportFile { get; set; } Property Value String ReportUnitExe Gets or sets the ReportUnit executable path. public string ReportUnitExe { get; set; } Property Value String TestResultFile Gets or sets the tests result file path. public string TestResultFile { get; set; } Property Value String WorkingDir Gets or sets the working directory to run the executable in. public string WorkingDir { get; set; } Property Value String Methods ExecuteInternal() Executes the ReportUnit. protected override void ExecuteInternal()"
  },
  "Heleonix.Build/api/Heleonix.Build.Tasks.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.Tasks.html",
    "title": "Namespace Heleonix.Build.Tasks | Heleonix",
    "keywords": "Namespace Heleonix.Build.Tasks Classes DirectoryClean Deletes contents of a directory, but not the directory itself. FileCopy Copies files from sources into destinations. FileRazorGenerate Generates a file using the passed Razor template file and passed list of data items. FileRead Gets content from file by specified regular expression. FileSystemSearch Searches items in the file system. FileUpdate Updates a file with specified regular expression and content. FileValidate Validates that contents of specified files corresponds to specified regex patterns. GitHubCommitChangeLog Collects a changelog from a GitHub repository using the GitHub API. GitHubRelease Creates a release on GitHub using the GitHub API. NugetPush Runs the Nuget push command. NUnit Runs the NUnit. OpenCover Runs the OpenCover. ReportGenerator Generates HTML report using the ReportGenerator tool. ReportUnit Generates HTML report using the ReportUnit tool."
  },
  "Heleonix.Build/api/Heleonix.Build.html": {
    "href": "Heleonix.Build/api/Heleonix.Build.html",
    "title": "Heleonix.Build | Heleonix",
    "keywords": "Heleonix.Build Properties Hx_Sys_DotnetExe A path to the dotnet.exe to be used by the relevant targets. It is passed in from the --exe CLI parameter. Default is 'dotnet.exe', considering it is globally available. Hx_WS_Dir A current folder, where build is executed. Usually, it's a folder where a repository was checked out. Hx_WS_BuildProjFile The build project file defining workspace-specific overrides. Hx_WS_RepositoryUrl A url of the repository. Depends on the VCS. For example: https://github.com/Heleonix/Heleonix.Build.git. Hx_WS_RepositoryAPIUrl A url of the repository API. Depends on the VCS. Default: https://api.github.com Hx_Run_BuildProjFile A file to override everything up to solution-specific definitions. Hx_Run_ArtifactsDir A path to the root artifacts directory, where targets produce their artifacts. Hx_Run_Configuration A configuration, i.e. \"Release\", \"Debug\" etc. Hx_Run_Number A unique numeric value of the incremental build from your CI/CD system (GitHub Actions, GitLab CI/CD, Jenkins, TeamCity, GoCD etc.). Items"
  },
  "Heleonix.Build/api/Hx_ChangeLog.html": {
    "href": "Heleonix.Build/api/Hx_ChangeLog.html",
    "title": "Hx_ChangeLog | Heleonix",
    "keywords": "Hx_ChangeLog Properties Hx_ChangeLog_ArtifactsDir A path to the ChangeLog artifacts directory. Items Hx_ChangeLog_TemplateFiles The list of template files to generates change logs from. Default are 'ReleaseNotes.md.cshtml' and 'ReleaseNotes.txt.cshtml' from the Heleonix.Build. Hx_ChangeLog_CustomChanges The list of custom changes with custom metadata to generate change logs with."
  },
  "Heleonix.Build/api/Hx_ChangeLog_GitHubCommit.html": {
    "href": "Heleonix.Build/api/Hx_ChangeLog_GitHubCommit.html",
    "title": "Hx_ChangeLog_GitHubCommit | Heleonix",
    "keywords": "Hx_ChangeLog_GitHubCommit Properties Hx_ChangeLog_GitHubCommit_Token A personal GitHub access token to authorize to the GitHub Releases API. Hx_ChangeLog_GitHubCommit_VersionTagRegExp A regular expression to extract a version from a tag name of the latest release in format 11.22.33. Hx_ChangeLog_GitHubCommit_MajorChangeRegExp A regular expression to identify a major change. Default is a regexp to identify a major change of Conventional Commits: https://www.conventionalcommits.org. Hx_ChangeLog_GitHubCommit_MinorChangeRegExp A regular expression to identify a minor change. Default is a regexp to identify a minor change of Conventional Commits: https://www.conventionalcommits.org. Hx_ChangeLog_GitHubCommit_PatchChangeRegExp A regular expression to identify a patch change. Default is a regexp to identify a patch change of Conventional Commits: https://www.conventionalcommits.org. Hx_ChangeLog_GitHubCommit_ChangeLogRegExp A regular expression to capture a change for the change log. Default is a regexp to identify changes of Conventional Commits: https://www.conventionalcommits.org. Hx_ChangeLog_GitHubCommit_RegExpOptions The .NET regular expression options for the regexp patterns. Default is 'None'. Items"
  },
  "Heleonix.Build/api/Hx_DocFX.html": {
    "href": "Heleonix.Build/api/Hx_DocFX.html",
    "title": "Hx_DocFX | Heleonix",
    "keywords": "Hx_DocFX Properties Hx_DocFX_ArtifactsDir A path to the DocFX artifacts directory. Hx_DocFX_RepositoryUrl A url of the documentation repository. Default is the $Hx_WS_RepositoryUrl. Hx_DocFX_Message The commit message to commit and upload the generated documentation back to the repository url. Default is 'Automatic update of documentation.'. Items"
  },
  "Heleonix.Build/api/Hx_DocFX_Git.html": {
    "href": "Heleonix.Build/api/Hx_DocFX_Git.html",
    "title": "Hx_DocFX_Git | Heleonix",
    "keywords": "Hx_DocFX_Git Properties Hx_DocFX_Git_BranchName The particular branch where the documentation is located. Default is 'gh-pages'. Hx_DocFX_Git_Token A token to download the documentation's branch from the specified repository url and upload the updated documentation back. Hx_DocFX_Git_User The user name of the author of the commit who updates the documentation. Hx_DocFX_Git_Email The email of the author of the commit who updates the documentation. Items"
  },
  "Heleonix.Build/api/Hx_ExtentReport.html": {
    "href": "Heleonix.Build/api/Hx_ExtentReport.html",
    "title": "Hx_ExtentReport | Heleonix",
    "keywords": "Hx_ExtentReport Properties Hx_ExtentReport_ArtifactsDir A path to the Extent reports artifacts directory. Hx_ExtentReport_TestResultsDir A path to the directory to search .xml test results recursively. Default is '$Hx_Run_ArtifactsDir/*Test'. Hx_ExtentReport_Reporter A reporter to generate report: 'html' or 'v3html'. Default is 'v3html'. Hx_ExtentReport_Merge Specify 'true' to merge test results into one report, otherwise 'false'. Default is 'true'. Items"
  },
  "Heleonix.Build/api/Hx_NetBuild.html": {
    "href": "Heleonix.Build/api/Hx_NetBuild.html",
    "title": "Hx_NetBuild | Heleonix",
    "keywords": "Hx_NetBuild Properties Hx_NetBuild_ArtifactsDir A path to the NetBuild artifacts directory. Hx_NetBuild_SlnFile A path to the solution file to build. Default is a .sln file found in the $Hx_WS_Dir. Hx_NetBuild_SnkFile The file with public/private keys pair to sign assemblies. Hx_NetBuild_Version The semantic version. It is passed as /p:Version property to the Build target. Default is a version retrieved from $Hx_ChangeLog_ArtifactsDir/semver.txt. Hx_NetBuild_AssemblyVersion The .NET Assembly version, like '1.0.0.0'. It is passed as /p:AssemblyVersion property to the Build target. Default version is composed as $Hx_NetBuild_Version.$Hx_Run_Number. Hx_NetBuild_ReleaseNotesFile A text file with package release notes. It is passed as /p:PackageReleaseNotes property into the Build target. Default is $Hx_ChangeLog_ArtifactsDir/ReleaseNotes.txt. Items Hx_NetBuild_DeleteFiles Files to delete during cleaning. Hx_NetBuild_DeleteDirs Directories to delete during cleaning. Hx_NetBuild_CleanDirs Directories to clean but not delete during cleaning. Hx_NetBuild_CustomArtifactsFiles Custom files to be copied to the artifacts directory."
  },
  "Heleonix.Build/api/Hx_NetNugetPush.html": {
    "href": "Heleonix.Build/api/Hx_NetNugetPush.html",
    "title": "Hx_NetNugetPush | Heleonix",
    "keywords": "Hx_NetNugetPush Properties Hx_NetNugetPush_ArtifactsDir A path to the NugetDeploy artifacts directory. Hx_NetNugetPush_APIKey The API key. Hx_NetNugetPush_SourceURL The source path to publish to (nuget.org etc.). Hx_NetNugetPush_Version The semantic version. It is passed as /p:Version property to the Pack target. Default is a version retrieved from the $Hx_ChangeLog_ArtifactsDir/semver.txt. Hx_NetNugetPush_ReleaseNotesFile A text file with package release notes. It is passed as /p:PackageReleaseNotes property into the Pack target. Default is $Hx_ChangeLog_ArtifactsDir/ReleaseNotes.txt. Items Hx_NetNugetPush_PackageFiles The package files to publish. If not specified, the .nupkg and .snupkg files are searched in the 'bin' folders. If files are not found, the target tries to find a .sln file and run the 'Pack' MSBuild target."
  },
  "Heleonix.Build/api/Hx_NetTest.html": {
    "href": "Heleonix.Build/api/Hx_NetTest.html",
    "title": "Hx_NetTest | Heleonix",
    "keywords": "Hx_NetTest Properties Hx_NetTest_ArtifactsDir A path to the artifacts directory to store results in. Hx_NetTest_Logger Specifies a logger for test results and switches for the logger, i.e.: \"trx;logfilename=TestResults.trx\". Default is \"nunit;LogFileName=NUnitTestResults.xml\". Hx_NetTest_Collect Specifies a data collector, i.e.: 'XPlat Code Coverage;Format=json,lcov,cobertura'. Default is 'XPlat Code Coverage' if $Hx_NetTest_VerifyCoverage is 'true' and $Hx_NetTest_RunSettingsFile is not specified/found. Hx_NetTest_RunSettingsFile The .runsettings file to use for running the tests. The $Hx_NetBuild_ArtifactsDir is discovered to find a *.runsettings file if the file is not specified. Hx_NetTest_Filter Filters tests using the given expression: <= != ~ !~> [ | & ]. Hx_NetTest_AdapterDir Path to a directory to be searched for additional test adapters. Hx_NetTest_DiagFile Enables diagnostic mode for the test platform and writes diagnostic messages to the specified file and to files next to it. Hx_NetTest_Verbosity Sets the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], diag[nostic]. The default is 'minimal'. Hx_NetTest_SourcePathRegExpOptions The .NET regular expression options to apply to the $Hx_NetTest_SourcePathRegExp. Default is 'Multiline'. Hx_NetTest_VerifyCoverage Set 'true' to verify minimal coverage, otherwise 'false'. Default is 'true'. Hx_NetTest_MinLineCoverage The minimum line coverage 0% - 100% to pass the target. Default is 100. Hx_NetTest_MinBranchCoverage The minimum branch coverage 0% - 100% to pass the target. Default is 100. Hx_NetTest_MinMethodCoverage The minimum method coverage 0% - 100% to pass the target. Default is 100. Items Hx_NetTest_TestFiles Inputs to run tests: .dll or .exe files containing tests, test projects .*proj or .sln. Default is a .sln file found in the $Hx_NetBuild_ArtifactsDir. Hx_NetTest_InlineRunSettings Run settings to be passed as '-- ...' arguments to override those in a .runsettings file. Specify run settings as MSBuild item metadata. Use '_' instead of dots for nested parameters. Example: metadata <MSTest_CaptureTraceOutput>false</MSTest_CaptureTraceOutput> becomes a 'MSTest.CaptureTraceOutput=false' argument. Hx_NetTest_SourcePathRegExps .NET regular expressions to find source code paths in generated files with results to replace. Found paths are replaced with stable accessible paths, i.e. raw repository links etc. Specify stable accessible paths in the 'Replacement' metadata."
  },
  "Heleonix.Build/api/Hx_NetValidate.html": {
    "href": "Heleonix.Build/api/Hx_NetValidate.html",
    "title": "Hx_NetValidate | Heleonix",
    "keywords": "Hx_NetValidate Properties Hx_NetValidate_RegExpOptions Regular expression options to use when executing validation for each Hx_NetValidate_Files. Items Hx_NetValidate_Files The list of files with regular expressions defined as metadata to validate. Defaults are project files, which must have the following packages: codecracker.CSharp, Microsoft.CodeAnalysis.NetAnalyzers, SecurityCodeScan.VS2019, SonarAnalyzer.CSharp, StyleCop.Analyzers."
  },
  "Heleonix.Build/api/Hx_Release_GitHub.html": {
    "href": "Heleonix.Build/api/Hx_Release_GitHub.html",
    "title": "Hx_Release_GitHub | Heleonix",
    "keywords": "Hx_Release_GitHub Properties Hx_Release_GitHub_Token A personal access token to authorize to the GitHub Releases API. Hx_Release_GitHub_TagName A name of the tag to create and/or from which the release should be created. Default is a version retrieved from the $Hx_ChangeLog_ArtifactsDir/semver.txt. Hx_Release_GitHub_ReleaseNotesFile A file with release notes for a release to be created. Default is $Hx_ChangeLog_ArtifactsDir/ReleaseNotes.md. Hx_Release_GitHub_TagSource Any branch or commit SHA from which the tag should be created. It is ignored if the tag already exists. Otherwise, name of the default branch 'master' is used. Items"
  },
  "Heleonix.Build/api/Hx_ReportGenerator.html": {
    "href": "Heleonix.Build/api/Hx_ReportGenerator.html",
    "title": "Hx_ReportGenerator | Heleonix",
    "keywords": "Hx_ReportGenerator Properties Hx_ReportGenerator_ArtifactsDir A path to the ReportGenerator artifacts directory. Hx_ReportGenerator_ReportTypes The report types to generate, separated by semicolon. See https://github.com/danielpalme/ReportGenerator?tab=readme-ov-file#supported-input-and-output-file-formats. Default is Badges;Html. Hx_ReportGenerator_Verbosity The verbosity: Error, Info, Verbose. Default is 'Info'. Items Hx_ReportGenerator_CoverageResultFiles The coverage results files to generate reports from. Defaults are '$Hx_Run_ArtifactsDir/Coverage/.' and '$Hx_Run_ArtifactsDir/Test/**/.'."
  },
  "Heleonix.Build/api/Hx_TrxReport.html": {
    "href": "Heleonix.Build/api/Hx_TrxReport.html",
    "title": "Hx_TrxReport | Heleonix",
    "keywords": "Hx_TrxReport Properties Hx_TrxReport_ArtifactsDir A path to the ReportUnit artifacts directory. Items Hx_TrxReport_TestResultFiles The test results files. Defaults are '$Hx_Run_ArtifactsDir/Test/**/.trx'."
  },
  "Heleonix.Build/extensibility.html": {
    "href": "Heleonix.Build/extensibility.html",
    "title": "Extensibility | Heleonix",
    "keywords": "Extensibility Global properties Global properties are defined out of targets, so they can be overriden in your custom *.hxbproj files out of targets or from the command line. Naming convention <Ns><_Sys | _WS | _Run>_<PropertyName>[Dir(s) | File(s) | Url(s) | <Ext>] Ns - namespace abbreviation of your project/company etc. Sys - system property, like path to the dotnet.exe. WS - workspace-level or workspace-related property, i.e. property related to the repository being built. Run - property related to a particular pipeline run (execution, iteration, increment etc.), i.e. build counter etc. Integration A new global property should have defined default value (if applicable) in the Heleonix.Build.hxbproj and printed to the output (if applicable) in the Hx_Initialize target. Documentation and IntelliSense A new global property should be documented in the Heleonix.Build.xsd. Targets It is possible to create custom targets in addition to those provided by the build framework. They can be created as contribution to the build framework or can be used in your own pipelines. Naming convention Target name <Ns>_<TargetName>[_Variation] Variation in the name allows to define multiple real targets with some specific implementations under the same virtual <Ns>_<TargetName>. For example, Hx_DocFX_Git is the real target, which checks out, builds and commits documentation using git, but the artifacts directory is Hx_DocFX. Also, there is no real target Hx_DocFX, but in the future the target Hx_DocFX_Svn might be created. There can be, however, properties or items defined with the name of the virtual target, i.e Hx_DocFX_Message. In this case they are common for all the real targets. Artifacts directory for all variations is the same Target parameters <TargetName>_<ParameterName>[Dir(s) | File(s) | Url(s) | <Ext>] If a parameter represents a single instance of something, then it should be defined as an MSBuild property. If a parameter represents multiple instances of something, then it should be defined as an MSBuild item and the name usually should end with (s), if that makes sense. Target private parameters _<TargetName>_<ParameterName>[Dir(s) | File(s) | <Ext>] Target artifacts The properties <TargetName>_ArtifactsDir define paths to artifacts directories and are defined outside of targets, as the global properties, because targets can depend on each other via artifacts. I.e. Hx_ChangeLog_ArtifactsDir is used by Hx_NetBuild, Hx_NetNugetPush etc. Targets can depend on each other only via artifacts directories, because if every target is executed in a standalone hxbuild run, then their properties and items are defined only within that particular hxbuild run. Artifacts directories can, however, be uploaded and re-used between standalone hxbuild runs. Integration In case of contribution, a new target needs to be placed in the Targets folder and included into the Targets list. Also, some unit test should be written to test key scenarios of usage and place in the Targets tests. Documentation and IntelliSense In case of contribution, the new target should be described in the xsd schema file and added to the existing Schemas and included into the list of target schemas. An example can be taken from any existing target, i.e. Hx_NetBuild.xsd. Custom target template <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"> <PropertyGroup> <Ns_TargetName_ArtifactsDir>$(Hx_Run_ArtifactsDir)/TargetName</Ns_TargetName_ArtifactsDir> </PropertyGroup> <Target Name=\"Ns_TargetName\"> <Message Text=\"> RUNNING Ns_TargetName ...\" Importance=\"high\"/> <Hx_NetSetupTool DotnetExe=\"$(Hx_Sys_DotnetExe)\" Name=\"NameOfFile\"> <Output TaskParameter=\"ToolPath\" PropertyName=\"_Ns_TargetName_NameOfFileExe\"/> </Hx_NetSetupTool> <!--Validation of required parameters--> <!--Target property groups, setting default vaues--> <!--Target item groups, setting default values--> <Message Text=\"> 1/3: Doing step one\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> 2/3: Doing step two\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> 3/3: Doing step three\" Importance=\"high\"/> <!--tasks, targets etc.--> <!--tasks, targets etc.--> <Message Text=\"> DONE Ns_TargetName\" Importance=\"high\"/> <OnError ExecuteTargets=\"Hx_OnError\"/> </Target> </Project> Tasks It is possible to contribute to the build framework with a custom task. Naming convention <Ns>_<TaskName> <TaskName> is named in the format Noun Verb. For example Hx_FileCopy, Hx_FileRead, Hx_DirectoryClean etc. Such naming approach is handy when the list of tasks is alphabetically sorted in the Solution Expllorer, or when IntelliSense displays list of available tasks while typing a task name. Integration A new task should inherit the <xref:Heleonix.Build.Tasks.BaseTask>. A new task should be placed in the Tasks folder and listed in the Tasks.tasks. A new task should be covered with a unit test with 100% of code coverage. The unit test should be placed in the Tasks tests. Documentation and IntelliSense A new task should be documented in the xsd schema file and placed in the Tasks schemas folder. The newly added task schema should be listed in the Tasks.xsd."
  },
  "Heleonix.Build/index.html": {
    "href": "Heleonix.Build/index.html",
    "title": "Heleonix.Build | Heleonix",
    "keywords": "Heleonix.Build The MSBuild-based build framework for applications on CI/CD systems. Install https://www.nuget.org/packages/Heleonix.Build The idea This framework is aiming to simplify implementation of different CI/CD stages for applications on CI/CD systems, like GoCD, Jenkins, TeamCity etc. The build framework consists of parameterized MSBuild targets, such as Hx_NetBuild, Hx_NetTest, Hx_NetValidate etc., which usually represent separate steps in CI pipelines. The build framework also provides set of reusable Heleonix.Build.Tasks. Usually source code is organized by following some well-known or custom standards, that's why this build framework supports solid customization. Basically it follows the \"configurable conventions\" approach. Default values of properties of Heleonix.Build targets follow well-known practices of arrangement of source code. So, if you follow well-known standards too, you do not even neeed to write custom build scripts. More details Usage Extensibility API"
  },
  "Heleonix.Build/usage.html": {
    "href": "Heleonix.Build/usage.html",
    "title": "Usage | Heleonix",
    "keywords": "Usage The framework is used as a .NET CLI tool hxbuild. It accepts the same arguments as the dotnet msbuild command, because it runs MSBuild under the hood. Command-line interface Argument Description -h, --help Displays help with possible CLI arguments --exe Custom dotnet.exe installation. By default, a globally available dotnet CLI installation is used MSBuild CLI args CLI arguments of the dotnet msbuild command: https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-msbuild| Examples: hxbuild -h displays detailed information about the hxbuild tool. hxbuild -t:Hx_NetBuild runs the Hx_NetBuild target. hxbuild --exe \"C:\\Program Files\\dotnet\\dotnet.exe\" -t:Hx_NetValidate;Hx_NetBuild -p:Hx_Run_Number=123 runs the Hx_NetValidate and then the Hx_NetBuild targets with the Hx_Run_Number 123 (see Heleonix.Build). Properties and Items The build framework provides ability to specify global properties and target-specific properties and items in the following priority order: Command-line input properties, for example: hxbuild -t:Hx_NetBuild -p:Hx_Run_Number=123 -p:Hx_NetBuild_SlnFile=\"./src/MyApp.sln\" Workspace-level *.hxbproj file. Create a *.hxbproj file in the format of MSBuild project file in the working directory, where the hxbuild tool is running. Usually it is the directory, where your repository was checked out, or a working directory of the CI/CD agent etc. Use the Hx_WS_BuildProjFile CLI property to customize location of the workspace-level *.hxbproj file starting from the working directory. For example: hxbuild -t:Hx_NetBuild -p:Hx_WS_BuildProjFile=\"some/where/in/the/working/directory/Build.hxbproj\". Run-level *.hxbproj file, which is specified as the CLI property -p:Hx_Run_BuildProjFile=\"D:\\company\\wide\\file.hxbproj\" This way can be used i.e. if your DevOps engineers want to specify common (project-wide or company-wide) values for certain properties or items. For example: hxbuild -t:Hx_NetBuild -p:Hx_Run_BuildProjFile=\"D:\\company\\wide\\file.hxbproj\" Custom .hxbproj file An example of a Build.hxbproj, which could be used in the p.2 and p.3 in [Properties and Items] might look as below: ﻿﻿<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"> <PropertyGroup> <Hx_NetBuild_SlnFile>./src/MyApp.sln</Hx_NetBuild_SlnFile> </PropertyGroup> <ItemGroup> <Hx_NetBuild_DeleteFiles Include=\"./extra-file.txt\" /> </ItemGroup> <Target Name=\"My_Custom_Pre_Target\" BeforeTargets=\"Hx_NetBuild\"> <Message Text=\"Values of properties and items specified at the execution phase override values specified at the evaluation phase\" Importance=\"high\" /> <PropertyGroup> <Hx_NetBuild_Version>./src/MyApp.sln</Hx_NetBuild_SlnFile> </PropertyGroup> </Taarget> <Target Name=\"My_Custom_Post_Target\" AfterTargets=\"Hx_NetBuild\"> <Message Text=\"Do something after the Hx_NetBuild target\" Importance=\"high\" /> </Target> </Project> Artifacts Targets can produce artifacts - files, which are generated in the target-specific artifacts directories. Every target has the Hx_<TargetName>_ArtifactsDir property, which specifies its artifacts location. The default location is the $(Hx_Run_ArtifactsDir)/<TargetName>, where <TargetName> is the name of the target without namespace. See also Hx_Run_ArtifactsDir. Targets can depend on other targets, but only on their artifacts and not their properties or items, because targets can be run as standalone hxbuild runs, and in these cases properties and items are defined only within a standalone run. Artifacts, on the other hand, can be stored and re-used between different hxbuild runs. Github actions Example below shows how the build framework could be used in your custom Github actions: name: \"Pull Request Checks\" on: pull_request: jobs: Validate-Build-Test: runs-on: 'windows-latest' steps: - name: Checkout uses: actions/checkout@v3 - name: HxBuild run: dotnet tool install Heleonix.Build --version 7.0.3 -g - name: Validate run: hxbuild -t:Hx_NetValidate - name: Build run: hxbuild -t:Hx_NetBuild - name: Test run: hxbuild -t:Hx_NetTest IntelliSense The build framework provides XSD schemas to use intellisense while crafting your custom *.hxbproj files. Example: The Heleonix.Build.xsd file needs to be specified as the additional XML validation schema for MSBuild projects in your IDE or editor. For Visual Studio, it should be done as below: Open the Microsoft.Build.xsd file in the Visual Studio installation folder: <Visual Studio Installation Directory>\\Xml\\Schemas\\1033\\Microsoft.Build.xsd. On Windows, it is usually C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Xml\\Schemas\\1033\\Microsoft.Build.xsd. Add additional schema location pointing to installation path of the Heleonix.Build.xsd. If the build framework is installed as a global .NET tool, the path might be: C:\\Users\\<USER-NAME>\\.dotnet\\tools\\.store\\heleonix.build\\7.0.2\\heleonix.build\\7.0.2\\tools\\net6.0\\any\\Schemas\\Heleonix.Build.xsd. Reload Visual Studio IDE. All your *.hxbproj files, as well as other MSBuild projects files will have the Schemas list automatically defined, as shown below: Notes Use slash / in paths in MSBuild properties and items, not backslash \\. MSBuild replaces them on *nix OSs anyway. Use slash / in path-related regular expressions in Heleonix.Build.Tasks."
  },
  "Heleonix.Execution/index.html": {
    "href": "Heleonix.Execution/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Extensions/index.html": {
    "href": "Heleonix.Extensions/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Guard/index.html": {
    "href": "Heleonix.Guard/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Reflection/index.html": {
    "href": "Heleonix.Reflection/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.AaaSpec.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.AaaSpec.html",
    "title": "Class AaaSpec | Heleonix",
    "keywords": "Class AaaSpec Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Represents the specification for the AAA tests pattern. public static class AaaSpec : Object Inheritance System.Object AaaSpec Methods Act(Action) Builds the 'Act' step of the test. public static void Act(Action action) Parameters action Action The action. And(String, Action) Builds the 'And' step of the test. public static void And(string description, Action action) Parameters description String The description. action Action The action. Arrange(Action) Builds the 'Arrange' step of the test. public static void Arrange(Action action) Parameters action Action The action. Should(String, Action) Builds the 'Should' step of the test. public static void Should(string description, Action action) Parameters description String The description. action Action The action. Teardown(Action) Builds the 'Teardown' step of the test. public static void Teardown(Action action) Parameters action Action The action. When(String, Action) Builds the 'When' step of the test. public static void When(string description, Action action) Parameters description String The description. action Action The action."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.ComponentTestAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.ComponentTestAttribute.html",
    "title": "Class ComponentTestAttribute | Heleonix",
    "keywords": "Class ComponentTestAttribute Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Marks a test fixture as a component tests. public sealed class ComponentTestAttribute : FixtureAttribute Inheritance System.Object BaseAttribute FixtureAttribute ComponentTestAttribute Implements IFixtureBuilder2 IFixtureBuilder Constructors ComponentTestAttribute() public ComponentTestAttribute() Properties Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value String The name of the test. Type Gets or sets the type of the component to be tested. public Type Type { get; set; } Property Value Type The type of the component to be tested. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.MemberTestAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.MemberTestAttribute.html",
    "title": "Class MemberTestAttribute | Heleonix",
    "keywords": "Class MemberTestAttribute Namespace Heleonix.Testing.NUnit.Aaa Assembly Heleonix.Testing.NUnit.dll Represents the attribute for testing of compononts' members, like methods, constructors, properties. public sealed class MemberTestAttribute : TestAttribute Inheritance System.Object BaseAttribute TestAttribute MemberTestAttribute Implements ISimpleTestBuilder IApplyToContext Constructors MemberTestAttribute() public MemberTestAttribute() Properties Name Gets or sets the name. public string Name { get; set; } Property Value String The name. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. TestName Gets the test name. protected override string TestName { get; } Property Value String The test name. Methods ApplyToContext(TestExecutionContext) public void ApplyToContext(TestExecutionContext context) Parameters context TestExecutionContext BuildFrom(IMethodInfo, Test) Builds a test method. public override TestMethod BuildFrom(IMethodInfo method, Test suite) Parameters method IMethodInfo The method. suite Test The suite. Returns TestMethod The test method. See Also TestAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Aaa.html",
    "title": "Namespace Heleonix.Testing.NUnit.Aaa | Heleonix",
    "keywords": "Namespace Heleonix.Testing.NUnit.Aaa Classes AaaSpec Represents the specification for the AAA tests pattern. ComponentTestAttribute Marks a test fixture as a component tests. MemberTestAttribute Represents the attribute for testing of compononts' members, like methods, constructors, properties."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.BddSpec.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.BddSpec.html",
    "title": "Class BddSpec | Heleonix",
    "keywords": "Class BddSpec Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Represents the specification for the BDD tests pattern. public static class BddSpec : Object Inheritance System.Object BddSpec Methods AfterEach(Action) Builds the 'AfterEach' step of the test. public static void AfterEach(Action action) Parameters action Action The action. And(String, Action) Builds the 'And' step of the test. public static void And(string description, Action action) Parameters description String The description. action Action The action. BeforeEach(Action) Builds the 'BeforeEach' step of the test. public static void BeforeEach(Action action) Parameters action Action The action. Given(String, Action) Builds the 'Given' step of the test. public static void Given(string description, Action action) Parameters description String The description. action Action The action. Then(String, Action) Builds the 'Then' step of the test. public static void Then(string description, Action action) Parameters description String The description. action Action The action. When(String, Action) Builds the 'When' step of the test. public static void When(string description, Action action) Parameters description String The description. action Action The action."
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.FeatureAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.FeatureAttribute.html",
    "title": "Class FeatureAttribute | Heleonix",
    "keywords": "Class FeatureAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks a test fixture as a feature tests. public sealed class FeatureAttribute : FixtureAttribute Inheritance System.Object BaseAttribute FixtureAttribute FeatureAttribute Implements IFixtureBuilder2 IFixtureBuilder Constructors FeatureAttribute() public FeatureAttribute() Properties Name Gets or sets the name. public string Name { get; set; } Property Value String The name. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value String The name of the test. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.ScenarioAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.ScenarioAttribute.html",
    "title": "Class ScenarioAttribute | Heleonix",
    "keywords": "Class ScenarioAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks a test a a scenario test. public sealed class ScenarioAttribute : TestAttribute Inheritance System.Object BaseAttribute TestAttribute ScenarioAttribute Implements ISimpleTestBuilder IApplyToContext Constructors ScenarioAttribute() public ScenarioAttribute() Properties Name Gets or sets the name of the scenario. public string Name { get; set; } Property Value String The name of the scenario. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. TestName Gets the name of the test. protected override string TestName { get; } Property Value String The name of the test. Methods ApplyToContext(TestExecutionContext) public void ApplyToContext(TestExecutionContext context) Parameters context TestExecutionContext BuildFrom(IMethodInfo, Test) Build a TestMethod from the provided MethodInfo. public override TestMethod BuildFrom(IMethodInfo method, Test suite) Parameters method IMethodInfo The method to be used as a test. suite Test The TestSuite to which the method will be added. Returns TestMethod A TestMethod object. See Also TestAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.StoryAttribute.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.StoryAttribute.html",
    "title": "Class StoryAttribute | Heleonix",
    "keywords": "Class StoryAttribute Namespace Heleonix.Testing.NUnit.Bdd Assembly Heleonix.Testing.NUnit.dll Marks test fixture as a story tests. public sealed class StoryAttribute : FixtureAttribute Inheritance System.Object BaseAttribute FixtureAttribute StoryAttribute Implements IFixtureBuilder2 IFixtureBuilder Constructors StoryAttribute() public StoryAttribute() Properties AsA Gets or sets an 'As a...' description. public string AsA { get; set; } Property Value String The 'As a...' description. Id Gets or sets an id of the story. public string Id { get; set; } Property Value String The id of the story. IWant Gets or sets an 'I want...' description. public string IWant { get; set; } Property Value String The 'I want..' description. Properties Gets the properties. protected override IDictionary<string, object> Properties { get; } Property Value IDictionary<String, Object> The properties. SoThat Gets or sets an 'So that...' description. public string SoThat { get; set; } Property Value String The 'So that...' description. Summary Gets or sets a summary of a story. public string Summary { get; set; } Property Value String A summary of a story. TestName Gets the name of the test. protected override string TestName { get; } Property Value String The name of the test. See Also FixtureAttribute"
  },
  "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.html": {
    "href": "Heleonix.Testing/Heleonix.Testing.NUnit.Bdd.html",
    "title": "Namespace Heleonix.Testing.NUnit.Bdd | Heleonix",
    "keywords": "Namespace Heleonix.Testing.NUnit.Bdd Classes BddSpec Represents the specification for the BDD tests pattern. FeatureAttribute Marks a test fixture as a feature tests. ScenarioAttribute Marks a test a a scenario test. StoryAttribute Marks test fixture as a story tests."
  },
  "Heleonix.Testing/index.html": {
    "href": "Heleonix.Testing/index.html",
    "title": "Heleonix.Testing | Heleonix",
    "keywords": "Heleonix.Testing The library for writing tests in BDD and AAA styles Install https://www.nuget.org/packages/Heleonix.Testing.NUnit AAA: Arrange Act Assert Structure using global::NUnit.Framework; using Heleonix.Testing.NUnit.Aaa; using static Heleonix.Testing.NUnit.Aaa.AaaSpec; /// <summary> /// Tests the <see cref=\"MyComponent\"/>. /// </summary> [ComponentTest(Type = typeof(MyComponent))] public static class MyComponentTests { /// <summary> /// Tests the <see cref=\"MyComponent.Member1\"/>. /// </summary> [MemberTest(Name = nameof(MyComponent.Member1))] public static void Member1() { Arrange(() => { }); Act(() => { }); Teardown(() => { }); When(\"the condition #1 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #1\", () => { }); }); When(\"the condition #2 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #2\", () => { }); }); } /// <summary> /// Tests the <see cref=\"MyComponent.Member2\"/>. /// </summary> [MemberTest(Name = nameof(MyComponent.Member2))] public static void Member2() { Arrange(() => { }); Act(() => { }); Teardown(() => { }); When(\"the action #1 is executed\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #1\", () => { Assert.Fail(); }); And(\"the condition #1 is true\", () => { Arrange(() => { }); Act(() => { }); Teardown(() => { }); Should(\"lead to the result #2\", () => { }); }); }); } } Tests Output BDD: Behavior Driven Development Structure using global::NUnit.Framework; using Heleonix.Testing.NUnit.Bdd; using static Heleonix.Testing.NUnit.Bdd.BddSpec; /// <summary> /// Tests the TheCoolStory. /// </summary> [Feature(Name = \"The Cool Feature\")] OR [Story( Id = \"111\", Summary = \"The cool story\", AsA = \"Product owner\", IWant = \"a cool story\", SoThat = \"I earn a lot of money\")] public static class TheCoolStory { /// <summary> /// Tests the Scenario. /// </summary> [Scenario(Name = \"Earn a lot of money in the story\")] public static void Scenario() { Given(\"the precondition #1\", () => { BeforeEach(() => { }); AfterEach(() => { }); When(\"the action #1 is executed\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #1 happens\", () => { }); And(\"the condition #1 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #2 happens\", () => { Assert.Fail(); }); }); }); And(\"condition #2 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); When(\"the action #2 is executed\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #3 happens\", () => { }); And(\"the condition #3 is true\", () => { BeforeEach(() => { }); AfterEach(() => { }); Then(\"the result #4 happens\", () => { }); }); }); }); }); } } Tests Output"
  },
  "Heleonix.Validation/index.html": {
    "href": "Heleonix.Validation/index.html",
    "title": "PLACEHOLDER | Heleonix",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Heleonix | Heleonix",
    "keywords": "Heleonix Heleonix is a common name for a set of free open source libraries to speed up and simplify routine development."
  }
}